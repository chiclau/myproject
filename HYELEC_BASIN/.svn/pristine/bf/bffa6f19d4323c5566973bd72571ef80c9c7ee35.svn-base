package com.lyht.business.analysisCalculation.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.apache.struts2.convention.annotation.Action;
import org.apache.struts2.convention.annotation.Namespace;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Controller;

import com.lyht.Constants;
import com.lyht.RetMessage;
import com.lyht.base.hibernate.common.PageResults;
import com.lyht.business.analysisCalculation.bean.Result;
import com.lyht.business.analysisCalculation.control.ResultControl;
import com.lyht.business.analysisCalculation.formbean.ResultFormBean;
import com.lyht.business.analysisCalculation.service.ResultService;
import com.lyht.business.consumer.hydrologicalData.bean.Pptn;
import com.lyht.business.consumer.hydrologicalData.bean.River;
import com.lyht.business.consumer.hydrologicalData.control.PptnControl;
import com.lyht.business.consumer.hydrologicalData.control.StbprpControl;
import com.lyht.business.consumer.hydrologicalData.formbean.PptnFormBean;
import com.lyht.business.consumer.hydrologicalData.formbean.StbprpFormBean;
import com.lyht.business.consumer.hydrologicalData.formbean.TsqxFormBean;
import com.lyht.business.consumer.hydrologicalData.service.StbprpService;
import com.lyht.business.system.bean.SysStaff;
import com.lyht.util.BaseLyhtAction;
import com.lyht.util.CommonFunction;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

/**
 * 产流计算action
 * @author 刘魁
 * 时间:2018.5.30
 */
@Namespace("/chanliu")
@Controller
@Scope("prototype")
@SuppressWarnings("rawtypes")
@Action("/chanliu")
public class ChanLiuAction extends BaseLyhtAction{

	private static final long serialVersionUID = 1L;
	private static Logger log = Logger.getLogger("ChanLiuAction");
	private PptnFormBean mPptnFormBean=new PptnFormBean();//降水量
	private StbprpFormBean mStbprpFormBean=new StbprpFormBean();//测站
	private ResultFormBean resultFormBean=new ResultFormBean();//计算结果
	@Resource
	private StbprpControl mStbprpControl;//测站
	@Resource
	private ResultControl resultControl;//计算结果
	@Resource
	private PptnControl mPptnControl;//降水量
	
	@Resource private StbprpService mStbprpService;
	@Resource private  ResultService resultService;
	
	private String quanzhong; //权重
	private String yu;//降雨量
	private String time;//时间
	private String result;//雨面量
	private String czmc;//测站名称
	private String pch; //批次号 时间年月日
	private String stcd; //测站编码
	private String start; //开始时间
	private String end;   //结束时间
	private String beginDate;
	private String endDate;
	private String  STCD;
	private String DATE;
	private String JYL;
	private double LL;
	/**
	 * 根据测站名称查询测站信息
	 * @return
	 */
	public String getStbprp() {
		log.info("ChanLiuAction=list:根据测站名称查询测站信息");
		HashMap<String, Object> mHashMap=new HashMap<String,Object>();
		RetMessage mRetMessage=new RetMessage();
		PageResults mPageResults=new PageResults();
		mRetMessage= mStbprpControl.getStbprpMes(mStbprpFormBean, mPageResults);
		if (mRetMessage.getRetflag().equals(RetMessage.RETFLAG_ERROR)){
			JSONArray mJSONArray = new JSONArray();
			mHashMap.put("total", 0);
			mHashMap.put("rows", mJSONArray);			
		} else {
			mHashMap.put("total", mPageResults.getTotalCount());
			mHashMap.put("rows", mPageResults.getResults());			
		}
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return null;
	}

	/**
	 * 模糊查询
	 * @return
	 */
	public String getStbprpMoHu() {
		log.info("ChanLiuAction=list:根据测站名称模糊查询测站信息");
		HashMap<String, Object> mHashMap=new HashMap<String,Object>();
		RetMessage mRetMessage=new RetMessage();
		PageResults mPageResults=new PageResults();
		mRetMessage= mStbprpControl.getStbprpMesMoHu(mStbprpFormBean, mPageResults);
		if (mRetMessage.getRetflag().equals(RetMessage.RETFLAG_ERROR)){
			JSONArray mJSONArray = new JSONArray();
			mHashMap.put("total", 0);
			mHashMap.put("rows", mJSONArray);			
		} else {
			mHashMap.put("total", mPageResults.getTotalCount());
			mHashMap.put("rows", mPageResults.getResults());			
		}
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return null;
	}
	/**
	 * 保存计算结果
	 * @return
	 */
	public String save() {
		log.info("ChanLiuAction=save:保存计算结果");
		HashMap<String, Object> mHashMap=new HashMap<String,Object>();
		RetMessage mRetMessage=new RetMessage();
		Result cresult=new Result();
		Result result1=new Result();
		SysStaff  mSysStaff = (SysStaff) getSession().getAttribute(Constants.SESSION_STAFF);
		cresult.setYml(result);
		cresult.setYmlTime(time);
		cresult.setJyl(yu);
		cresult.setPch(pch);
		cresult.setStnm(czmc);
		cresult.setQz(quanzhong);
		cresult.setCreateStaff(mSysStaff.getStaffCode());//存入当前用户code
		mRetMessage=resultControl.create(cresult, result1);
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());		
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return null;
	}
	
	
	/**
	 * 获取降水量
	 * @return
	 */
	public String list(){
		log.info("ChanLiuAction=list: 根据测站名称获取降水量列表");
		HashMap<String, Object> mHashMap=new HashMap<String,Object>();
		RetMessage mRetMessage=new RetMessage();
		PageResults mPageResults=new PageResults();
		mRetMessage= mStbprpControl.getStbprpMes(mStbprpFormBean, mPageResults);
		mPageResults.getResults();
		String stcd=mStbprpFormBean.getmStbprpInfoBean().getStcd();
		Pptn pptn=new Pptn();
		pptn.setStcd(stcd);
		mPptnFormBean.setmPptnInfoBean(pptn);  
		mRetMessage= mPptnControl.getPptnMes(mPptnFormBean, mPageResults); 	//查
		if (mRetMessage.getRetflag().equals(RetMessage.RETFLAG_ERROR)){
			JSONArray mJSONArray = new JSONArray();
			mHashMap.put("total", 0);
			mHashMap.put("rows", mJSONArray);			
		} else {
			mHashMap.put("total", mPageResults.getTotalCount());
			mHashMap.put("rows", mPageResults.getResults());			
		}
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());		
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return null;
	}
	
	
	/**
	 * 获取计算结果历史记录，数据到前台select
	 * @return
	 */
	public String getSelect() {
		log.info("ChanLiuAction=list: 获取计算结果历史记录");
		HashMap<String, Object> mHashMap=new HashMap<String,Object>();
		RetMessage mRetMessage=new RetMessage();
		PageResults mPageResults=new PageResults();
		mRetMessage= resultControl.getResult(resultFormBean,mPageResults);
		if (mRetMessage.getRetflag().equals(RetMessage.RETFLAG_ERROR)){
			JSONArray mJSONArray = new JSONArray();
			mHashMap.put("total", 0);
			mHashMap.put("rows", mJSONArray);	
		}else {
			mHashMap.put("total", mPageResults.getTotalCount());
			mHashMap.put("rows", mPageResults.getResults());	
		}
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return null;
	}
	
	
	/**
	 * 根据选择的历史记录查找相应的计算结果信息
	 * @return
	 */
	public String getHistory() {
		log.info("ChanLiuAction=list: 根据计算结果编号查询计算数据");
		HashMap<String, Object> mHashMap=new HashMap<String,Object>();
		RetMessage mRetMessage=new RetMessage();
		PageResults mPageResults=new PageResults();
		resultFormBean.getResultBean().setPch(pch);//设置批次号
		mRetMessage= resultControl.getHistory(resultFormBean,mPageResults);
		if (mRetMessage.getRetflag().equals(RetMessage.RETFLAG_ERROR)){
			JSONArray mJSONArray = new JSONArray();
			mHashMap.put("total", 0);
			mHashMap.put("rows", mJSONArray);	
		}else {
			mHashMap.put("total", mPageResults.getTotalCount());
			mHashMap.put("rows", mPageResults.getResults());	
		}
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return null;
	}
	
	/**
	 * 步骤2提供json1入口
	 * @return
	 */
	public String step2() {
		log.info("ChanLiuAction=list: 步骤一.2 Table,json1的数据来源");
		HashMap<String, Object> mHashMap=new HashMap<String,Object>();
		RetMessage mRetMessage=new RetMessage();
		PageResults mPageResults=new PageResults();
		mHashMap.put("CODE", "1");
		mHashMap.put("MESSAGE", "0");
		mHashMap.put("PAGESIZE", 0);
		mHashMap.put("PAGEINDEX", 0);
		mHashMap.put("TOTALAMOUNT", 0);
		mRetMessage= resultControl.step2(resultFormBean,start,end,mPageResults);
		List listdata=mPageResults.getResults();
		mHashMap.put("DATA", listdata);
		List<HashMap<String, Object>>list =new ArrayList<HashMap<String, Object>>();//EXTRADATA
		HashMap<String, Object> listMap=new HashMap<String, Object>();	
		listMap.put("STNM", "站名");
		listMap.put("PCH", "洪号");
		listMap.put("LYMJ", "流域面积");
		list.add(listMap);
		mHashMap.put("EXTRADATA", list);
		JSONObject json = JSONObject.fromObject(mHashMap);
		CommonFunction.writeResponse(getResponse(), json);
		//getResponse().setContentType("json;charset=utf-8");
		return null;
	}
	
	
	/**
	 * JSON2入口 testsyq_1-n.json
	 * @return
	 */
	public String step2chart() {
		log.info("ChanLiuAction=list:步骤一.2 Echarts, json2的数据来源");
		HashMap<String, Object> mHashMap=new HashMap<String,Object>();
		RetMessage mRetMessage=new RetMessage();
		PageResults mPageResults=new PageResults();
		mHashMap.put("CODE", "1");
		mHashMap.put("MESSAGE", "0");
		mHashMap.put("PAGESIZE", 0);
		mHashMap.put("PAGEINDEX", 0);
		mHashMap.put("TOTALAMOUNT", 2);
		List<HashMap<String, Object>>dataList =new ArrayList<HashMap<String, Object>>();//DATA
		HashMap<String, Object> map=new HashMap<String, Object>();// DATA 
		map.put("STCD", "");
		map.put("STNM", "");
		map.put("NAME", "流量");
		map.put("TYPE", "line");
		List list=resultService.maxLL();
		HashMap<String, Object> lmax= (HashMap<String, Object>) list.get(0);
		Object max=  lmax.get("LL");
		map.put("MAX",	Integer.parseInt(max.toString())*2);//流量的最大值
		dataList.add(map);
		mRetMessage= resultControl.getLiuliang(resultFormBean, start, end, mPageResults);//流量
		List<HashMap<String, Object>> liuLiangList=	mPageResults.getResults();
		HashMap<String, Object> liuLiangmap=new HashMap<String, Object>();
		List<Object[]> newList=new ArrayList<Object[]>();
		for(int i=0;i<liuLiangList.size();i++) {
			liuLiangmap.put((String) liuLiangList.get(i).get("DATE"), liuLiangList.get(i).get("LL"));
			Object [] ma=new Object [2];
			ma[0]=liuLiangList.get(i).get("DATE");
			ma[1]=liuLiangList.get(i).get("LL");
			newList.add(ma);
		}
		 Object[] array =newList.toArray();
		map.put("DATA", array); //流量
		HashMap<String, Object> jiangYuMap=new HashMap<String, Object>();//降雨量
		jiangYuMap.put("STCD", "");
		jiangYuMap.put("STNM", "");
		jiangYuMap.put("NAME", "降雨量");
		jiangYuMap.put("TYPE", "bar");
		List ymllist=resultService.maxYml();
		HashMap<String, Object> ymllistmax= (HashMap<String, Object>) ymllist.get(0);
		Object JYL=  ymllistmax.get("JYL");
		jiangYuMap.put("MAX", Integer.parseInt(JYL.toString())*2);//降雨量的最大值
		mRetMessage= resultControl.getyml(resultFormBean, start, end, mPageResults);//降雨量
		List<HashMap<String, Object>> jList=	mPageResults.getResults();
		HashMap<String, Object> jyLmap=new HashMap<String, Object>();
		List<Object[]> newList1=new ArrayList<Object[]>();
		for(int i=0;i<jList.size();i++) {
			jyLmap.put((String) jList.get(i).get("DATE"), jList.get(i).get("JYL"));
			Object [] jy=new Object [2];
			jy[0]=jList.get(i).get("DATE");
			jy[1]=jList.get(i).get("JYL");
			newList1.add(jy);
		}
		//JSONObject json2 = JSONObject.fromObject(jyLmap);
		 Object[]  strArray = newList1.toArray();
		jiangYuMap.put("DATA", strArray);//降雨量
		dataList.add(jiangYuMap);
		mHashMap.put("DATA", dataList); //给DATA数据
		//结尾数据
		List<HashMap<String, Object>>exta =new ArrayList<HashMap<String, Object>>();//EXTRADATA
		HashMap<String, Object> map1=new HashMap<String, Object>();//EXTRADATA map
		map1.put("START", "2018-06-05 00:00");
		map1.put("END", "2018-06-06 00:00");
		map1.put("CHARTTITLE", "降雨量流量关系图");
		exta.add(map1);//添加数据
		mHashMap.put("EXTRADATA", exta);
		JSONObject json = JSONObject.fromObject(mHashMap);
		CommonFunction.writeResponse(getResponse(), json);
		return null;
	}
	
	/**
	 * 步骤2修改table数据
	 * @return
	 */
	public String updateData() {
		log.info("ChanLiuAction=update:步骤一.2修改table数据");
		HashMap<String, Object> mHashMap = new HashMap<String, Object>();
		RetMessage mRetMessage=new RetMessage();
		River mRiver=new River();
		resultFormBean.getResultBean().setYml(JYL);
		resultFormBean.getResultBean().setYmlTime(DATE);
		mRiver.setQ(LL);
		mRiver.setStcd(STCD);
		mRiver.setTm(DATE);
		mRetMessage= resultControl.updateTableData(resultFormBean,mRiver);//修改方法
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());		
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return null;
	}
	
	/**
	 * 退水曲线json
	 * @return
	 */
	public String  getTsqx() {
		log.info("ChanLiuAction=getTsqx:获取退水曲线");
		HashMap<String, Object> mHashMap = new HashMap<String, Object>();
		RetMessage mRetMessage=new RetMessage();
		PageResults mPageResults=new PageResults();
		TsqxFormBean mTsqxFormBean=new TsqxFormBean ();
		//获取退水曲线的数据
		mHashMap.put("CODE", "1");
		mHashMap.put("MESSAGE", "0");
		mHashMap.put("PAGESIZE", 0);
		mHashMap.put("PAGEINDEX", 0);
		mHashMap.put("TOTALAMOUNT", 2);
		
		resultControl.getTsqx(mTsqxFormBean, resultFormBean, start, end, mPageResults);
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());		
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return  null;
	}
	
	/**
	 *步骤3，保存
	 * @return
	 */
	public String saveLineFor3() {
		log.info("ChanLiuAction=qiuHe:计算求和");
		HashMap<String, Object> mHashMap = new HashMap<String, Object>();
		RetMessage mRetMessage=new RetMessage();
		//计算求和步骤
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());		
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return null;
	}
	
	
	public String qiuHe() {
		log.info("ChanLiuAction=qiuHe:计算求和");
		HashMap<String, Object> mHashMap = new HashMap<String, Object>();
		RetMessage mRetMessage=new RetMessage();
		//计算求和步骤
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());		
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return null;
	}
	
	
	/**
	 * 求对数
	 * @return
	 */
	public String getLog() {
		log.info("ChanLiuAction=qiuLog:求对数的方法");
		HashMap<String, Object> mHashMap = new HashMap<String, Object>();
		RetMessage mRetMessage=new RetMessage();
		Double bDouble=	Math.log(100);
		System.out.println(bDouble);
		
		mHashMap.put(RetMessage.AJAX_RETFLAG, mRetMessage.getRetflag());
		mHashMap.put(RetMessage.AJAX_MESSAGE, mRetMessage.getMessage());		
		CommonFunction.writeResponse(getResponse(), mHashMap);
		return null;
	}
	
	
	public String getStart() {
		return start;
	}

	public void setStart(String start) {
		this.start = start;
	}

	public String getEnd() {
		return end;
	}

	public void setEnd(String end) {
		this.end = end;
	}

	public String getStcd() {
		return stcd;
	}

	public void setStcd(String stcd) {
		this.stcd = stcd;
	}

	public ResultFormBean getResultFormBean() {
		return resultFormBean;
	}

	public void setResultFormBean(ResultFormBean resultFormBean) {
		this.resultFormBean = resultFormBean;
	}

	public String getCzmc() {
		return czmc;
	}

	public void setCzmc(String czmc) {
		this.czmc = czmc;
	}

	public String getResult() {
		return result;
	}

	public void setResult(String result) {
		this.result = result;
	}

	public String getTime() {
		return time;
	}

	public void setTime(String time) {
		this.time = time;
	}

	public String getQuanzhong() {
		return quanzhong;
	}

	public void setQuanzhong(String quanzhong) {
		this.quanzhong = quanzhong;
	}

	public String getYu() {
		return yu;
	}

	public void setYu(String yu) {
		this.yu = yu;
	}


	public StbprpFormBean getmStbprpFormBean() {
		return mStbprpFormBean;
	}

	public void setmStbprpFormBean(StbprpFormBean mStbprpFormBean) {
		this.mStbprpFormBean = mStbprpFormBean;
	}

	public PptnFormBean getmPptnFormBean() {
		return mPptnFormBean;
	}

	public void setmPptnFormBean(PptnFormBean mPptnFormBean) {
		this.mPptnFormBean = mPptnFormBean;
	}

	public String getPch() {
		return pch;
	}

	public void setPch(String pch) {
		this.pch = pch;
	}

	public String getBeginDate() {
		return beginDate;
	}

	public void setBeginDate(String beginDate) {
		this.beginDate = beginDate;
	}

	public String getEndDate() {
		return endDate;
	}

	public void setEndDate(String endDate) {
		this.endDate = endDate;
	}

	public String getSTCD() {
		return STCD;
	}

	public void setSTCD(String sTCD) {
		STCD = sTCD;
	}

	public String getDATE() {
		return DATE;
	}

	public void setDATE(String dATE) {
		DATE = dATE;
	}

	public String getJYL() {
		return JYL;
	}

	public void setJYL(String jYL) {
		JYL = jYL;
	}

	public double getLL() {
		return LL;
	}

	public void setLL(double lL) {
		LL = lL;
	}

	
	
	
	
}
