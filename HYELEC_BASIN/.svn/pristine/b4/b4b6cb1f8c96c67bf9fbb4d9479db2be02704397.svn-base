package com.lyht.util;

import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.lyht.business.analysisCalculation.bean.StPptnDayR;
import com.lyht.business.consumer.hydrologicalData.bean.Dayev;
import com.lyht.business.consumer.hydrologicalData.bean.Pptn;
import com.lyht.business.consumer.hydrologicalData.bean.River;  

/** 
 *  
 * excel读取工具类 
 *  
 * @see [相关类/方法] 
 * @since [产品/模块版本] 
 */ 
public class ImportExeclUtil {
	private static int totalRows = 0;// 总行数  
    
    private static int totalCells = 0;// 总列数  
      
    private static String errorInfo;// 错误信息  
    
    /** 无参构造方法 */  
    public ImportExeclUtil() {
    	
    }
    
    public static int getTotalRows()  {
    	return totalRows;  
    }
      
    public static int getTotalCells() {
    	return totalCells;  
    }
      
    public static String getErrorInfo() {
    	return errorInfo;  
    } 
    /**
     * 解析降雨量excel方法
     * @param inputStream
     * @param isExcel2003
     * @return
     */
    public List<Pptn> parsePptnExcel(InputStream inputStream, boolean isExcel2003) throws IOException{
    	/** 根据版本选择创建Workbook的方式 */  
        Workbook wb = null;  
        if (isExcel2003){
        	wb = new HSSFWorkbook(inputStream);  
        }else{
        	wb = new XSSFWorkbook(inputStream);  
        }
        List<Pptn> dataLst = readPptnExcel(wb);  
        return dataLst;  
    }
    /**
     * 读取降水量的excel数据
     * @param wb
     * @return
     */
    private List<Pptn> readPptnExcel(Workbook wb){
    	int rnum=54;//每页固定行数
    	int cnum=20;//每页固定列数
    	int pnum=1;//页码
    	int xnum=4;//每页循环的列次数
    	int ynum=5;//每次列循环取的列数
    	String year=null,month=null,day=null,stcd=null;
    	List<Pptn> dataLst = new ArrayList<Pptn>();  
        
        /** 得到第一个shell */  
        Sheet sheet = wb.getSheetAt(0);  
        /** 得到Excel的行数 */  
        totalRows = sheet.getPhysicalNumberOfRows();  
        pnum=(totalRows+rnum-1)/rnum;//要循环的页数
        for(int p=0;p<pnum;p++){
        	int rownum=p*rnum+1;
        	//获取测站编码，年份
        	Row rowTotal = sheet.getRow(rownum);  
        	Cell cellYear = rowTotal.getCell(2);  
        	year=(cellYear.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(cellYear.getNumericCellValue()).intValue()):cellYear.getStringCellValue();
        	Cell cellStcd = rowTotal.getCell(5);
        	stcd=cellStcd.getStringCellValue();
        	if(CommonUtil.trim(stcd).length()>0
        			&& CommonUtil.trim(year).length()>0){
        		for(int c=0;c<xnum;c++){
            		for(int r=4;r<rnum;r++){
            			//获取测站编码，年份
            			int i=p*rnum+r;
            			if(i<totalRows){
            				Row row = sheet.getRow(i); 
                			if(row!=null){
                				int m=c*ynum;//取月的列数
                    			int d=c*ynum+1;//取日的列数
                    			int b=c*ynum+2;//取开始时分秒的列数
                    			int e=c*ynum+3;//取结束时分秒的列数
                    			int l=c*ynum+4;//取降水量的列数
                    			Cell mcell=row.getCell(m);
                    			String mm=(mcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(mcell.getNumericCellValue()).intValue()):((CommonUtil.trim(mcell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(mcell.getStringCellValue()))?CommonUtil.trim(mcell.getStringCellValue()):"");
                    			if(CommonUtil.trim(mm).length()>0){
                    				month=mm;
                    			}
                    			Cell dcell=row.getCell(d);
                    			String dd=(dcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(dcell.getNumericCellValue()).intValue()):((CommonUtil.trim(dcell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(dcell.getStringCellValue()))?CommonUtil.trim(dcell.getStringCellValue()):"");
                    			if(CommonUtil.trim(dd).length()>0){
                    				day=dd;
                    			}
                    			Cell bcell=row.getCell(b);
                    			String bstr=(bcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(bcell.getNumericCellValue()).intValue()):((CommonUtil.trim(bcell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(bcell.getStringCellValue()))?CommonUtil.trim(bcell.getStringCellValue()):"");
                    			Cell ecell=row.getCell(e);
                    			String estr=(ecell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(ecell.getNumericCellValue()).intValue()):((CommonUtil.trim(ecell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(ecell.getStringCellValue()))?CommonUtil.trim(ecell.getStringCellValue()):"");
                    			Cell lcell=row.getCell(l);
                    			String lstr=(lcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(lcell.getNumericCellValue()):((CommonUtil.trim(lcell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(lcell.getStringCellValue()))?CommonUtil.trim(lcell.getStringCellValue()):"");
                    			if(CommonUtil.trim(month).length()>0 
                    					&&CommonUtil.trim(day).length()>0 
                    					&&CommonUtil.trim(bstr).length()>0 
                    					&& CommonUtil.trim(estr).length()>0
                    					&& CommonUtil.trim(lstr).length()>0){
                    				//都不为空
                    				//都为数字
                					String daystr=year;
                					daystr=daystr+"-"+(month.length()<2?"0"+month:month);
                					daystr=daystr+"-"+(day.length()<2?"0"+day:day);
                					String beginTime=daystr;
                					beginTime=beginTime+" "+(bstr.length()<1?"0"+bstr:bstr);
                					beginTime=beginTime+":00:00";
                					String endTime=daystr;
                					if(Integer.valueOf(estr)==24){
                						endTime=CommonUtil.getAfterMinitsDateTime(daystr+" 00:00:00", 24*60);
                					}else if(Integer.valueOf(bstr)>Integer.valueOf(estr)){
                						endTime=CommonUtil.getAfterMinitsDateTime(daystr+" 00:00:00", 24*60);
                						endTime=CommonUtil.getAfterMinitsDateTime(endTime, Integer.valueOf(estr)*60);
                					}else{
                						endTime=endTime+" "+(estr.length()<1?"0"+estr:estr);
                    					endTime=endTime+":00:00";
                					}
                					Pptn pp = new Pptn();
                					pp.setStcd(stcd);
                					pp.setTm(beginTime);
                					pp.setEtm(endTime);
                					pp.setDrp(CommonUtil.getFloatValue(lstr));
                					long intv=CommonUtil.getDifferenceTime(beginTime, endTime);
                					double sd=new BigDecimal(intv/60).setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();
                					pp.setIntv(sd);
                					dataLst.add(pp);
                    			}
                			}
            			}
            		}
            	}
        	}
        }
        return dataLst;
    }
    /**
     * 解析河道水情excel方法
     * @param inputStream
     * @param isExcel2003
     * @return
     */
    public List<River> parseRiverExcel(InputStream inputStream, boolean isExcel2003) throws IOException{
    	/** 根据版本选择创建Workbook的方式 */  
        Workbook wb = null;  
        if (isExcel2003){
        	wb = new HSSFWorkbook(inputStream);  
        }else{
        	wb = new XSSFWorkbook(inputStream);  
        }
        List<River> dataLst = readRiverExcel(wb);  
        return dataLst;  
    }
    /**
     * 读取降水量的excel数据
     * @param wb
     * @return
     */
    private List<River> readRiverExcel(Workbook wb){
    	int rnum=55;//每页固定行数
    	int cnum=20;//每页固定列数
    	int pnum=1;//页码
    	int xnum=4;//每页循环的列次数
    	int ynum=5;//每次列循环取的列数
    	String year=null,month=null,day=null,stcd=null;
    	List<River> dataLst = new ArrayList<River>();  
        
        /** 得到第一个shell */  
        Sheet sheet = wb.getSheetAt(0);  
        /** 得到Excel的行数 */  
        totalRows = sheet.getPhysicalNumberOfRows();  
        pnum=(totalRows+rnum-1)/rnum;//要循环的页数
        for(int p=0;p<pnum;p++){
        	int rownum=p*rnum+2;
        	//获取测站编码，年份
        	Row rowTotal = sheet.getRow(rownum);  
        	Cell cellYear = rowTotal.getCell(2);  
        	year=(cellYear.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(cellYear.getNumericCellValue()).intValue()):cellYear.getStringCellValue();
        	Cell cellStcd = rowTotal.getCell(6);
        	stcd=cellStcd.getStringCellValue();
        	if(CommonUtil.trim(stcd).length()>0
        			&& CommonUtil.trim(year).length()>0){
        		for(int c=0;c<xnum;c++){
            		for(int r=5;r<rnum;r++){
            			//获取测站编码，年份
            			int i=p*rnum+r;
            			if(i<totalRows){
            				Row row = sheet.getRow(i); 
                			if(row!=null){
                				int m=c*ynum;//取月的列数
                    			int d=c*ynum+1;//取日的列数
                    			int b=c*ynum+2;//取开始时分秒的列数
                    			int s=c*ynum+3;//取结束时分秒的列数
                    			int l=c*ynum+4;//取降水量的列数
                    			Cell mcell=row.getCell(m);
                    			String mm=(mcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(mcell.getNumericCellValue()).intValue()):((CommonUtil.trim(mcell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(mcell.getStringCellValue()))?CommonUtil.trim(mcell.getStringCellValue()):"");
                    			if(CommonUtil.trim(mm).length()>0){
                    				month=mm;
                    			}
                    			Cell dcell=row.getCell(d);
                    			String dd=(dcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(dcell.getNumericCellValue()).intValue()):((CommonUtil.trim(dcell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(dcell.getStringCellValue()))?CommonUtil.trim(dcell.getStringCellValue()):"");
                    			if(CommonUtil.trim(dd).length()>0){
                    				day=dd;
                    			}
                    			Cell bcell=row.getCell(b);
                    			String bstr=(bcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(bcell.getNumericCellValue()).intValue()):((CommonUtil.trim(bcell.getStringCellValue()).length()>0)?CommonUtil.trim(bcell.getStringCellValue()):null);
//                    			String bstr=CommonUtil.trim(bcell.getStringCellValue());
                    			String[] timeArr=CommonUtil.trim(bstr).length()>0?bstr.split(":"):null;
                    			if(timeArr!=null && timeArr.length>0){
                    				if(timeArr.length==2){
                    					bstr=timeArr[0].length()<2?"0"+timeArr[0]:timeArr[0];
                    					bstr=bstr+":"+(timeArr[1].length()<2?"0"+timeArr[1]:timeArr[1]);
                    				}else if(timeArr.length==1){
                    					bstr=timeArr[0].length()<2?"0"+timeArr[0]:timeArr[0];
                    					bstr=bstr+":00";
                    				}
                    				bstr=bstr+":00";
                    				Cell scell=row.getCell(s);
                        			String sstr=(scell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(scell.getNumericCellValue())):((CommonUtil.trim(scell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(scell.getStringCellValue()))?CommonUtil.trim(scell.getStringCellValue()):null);
                        			Cell lcell=row.getCell(l);
                        			String lstr=(lcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(lcell.getNumericCellValue()):((CommonUtil.trim(lcell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(lcell.getStringCellValue()))?CommonUtil.trim(lcell.getStringCellValue()):"");
                        			if(CommonUtil.trim(month).length()>0 
                        					&&CommonUtil.trim(day).length()>0 
                        					&&CommonUtil.trim(bstr).length()>0 
                        					&& CommonUtil.trim(sstr).length()>0
                        					&& CommonUtil.trim(lstr).length()>0){
                        				//都不为空
                        				//都为数字
                    					String daystr=year;
                    					daystr=daystr+"-"+(month.length()<2?"0"+month:month);
                    					daystr=daystr+"-"+(day.length()<2?"0"+day:day);
                    					String beginTime=daystr;
                    					beginTime=beginTime+" "+bstr;
                    					
                    					River pp = new River();
                    					pp.setStcd(stcd);
                    					pp.setTm(beginTime);
                    					pp.setZ(CommonUtil.getFloatValue(sstr));;
                    					pp.setQ(CommonUtil.getFloatValue(lstr));
                    					dataLst.add(pp);
                        			}
                    			}
                			}
            			}
            		}
            	}
        	}
        }
        return dataLst;
    }
    /**
     * 解析日蒸发量excel方法
     * @param inputStream
     * @param isExcel2003
     * @return
     */
    public List<Dayev> parseDayevExcel(InputStream inputStream, boolean isExcel2003) throws IOException{
    	/** 根据版本选择创建Workbook的方式 */  
        Workbook wb = null;  
        if (isExcel2003){
        	wb = new HSSFWorkbook(inputStream);  
        }else{
        	wb = new XSSFWorkbook(inputStream);  
        }
        List<Dayev> dataLst = readDayevExcel(wb);  
        return dataLst;  
    }
    /**
     * 读取日蒸发量的excel数据
     * @param wb
     * @return
     */
    private List<Dayev> readDayevExcel(Workbook wb){
    	int months=12;//月份
    	int days=31;//天数
    	String year=null,month=null,day=null,stcd=null,emptName=null;
    	List<Dayev> dataLst = new ArrayList<Dayev>();  
        
        /** 得到第一个shell */  
        Sheet sheet = wb.getSheetAt(0);  
        /** 得到Excel的行数 */  
        totalRows = sheet.getPhysicalNumberOfRows(); 
        //获取年份，测站编码，蒸发器类型
        Row rowTotal = sheet.getRow(1);
        Cell totalCell1 = rowTotal.getCell(0);  
        String cell1Value = totalCell1.getStringCellValue();
        if(CommonUtil.trim(cell1Value).length()<1){
        	return dataLst;
        }
        String[] strArray=cell1Value.split(" ");
        if(strArray==null || strArray.length<2){
        	return dataLst;
        }
        String yearDesc=strArray[0];
        String stcdDesc=strArray[1];
        String[] yearArray=CommonUtil.trim(yearDesc).length()>0?yearDesc.split(":"):null;
        String[] stcdArray=CommonUtil.trim(stcdDesc).length()>0?stcdDesc.split(":"):null;
        if(yearArray==null || yearArray.length<2){
        	return dataLst;
        }
        if(stcdArray==null || stcdArray.length<2){
        	return dataLst;
        }
        year=yearArray[1];
        stcd=stcdArray[1];
        if(CommonUtil.trim(year).length()<1 || CommonUtil.trim(stcd).length()<1){
        	return dataLst;
        }
        Cell totalCell8 = rowTotal.getCell(8);  
        String cell8Value = totalCell8.getStringCellValue();
        String[] emptArray=CommonUtil.trim(cell8Value).length()>0?cell8Value.split(":"):null;
        if(emptArray==null || emptArray.length<1){
        	return dataLst;
        }
        emptName=emptArray[1];
        if(CommonUtil.trim(emptName).length()<1){
        	emptName="其他";
        }
        for(int r=4;r<days+4;r++){
        	Row dr=sheet.getRow(r);
        	Cell dcell = dr.getCell(0);
        	String dd = (dcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(dcell.getNumericCellValue()).intValue()):((CommonUtil.trim(dcell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(dcell.getStringCellValue()))?CommonUtil.trim(dcell.getStringCellValue()):"");
        	if(CommonUtil.trim(dd).length()>0){
        		for(int m=1;m<=months;m++){
            		Cell mcell=dr.getCell(m+1);
            		System.out.println("------------------r-----------"+r+"---------------m------"+(m+1)+"--------------type------"+(mcell.getCellType()==Cell.CELL_TYPE_NUMERIC));
            		String cellValue = (mcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(mcell.getNumericCellValue()):mcell.getStringCellValue();
            		if(mcell!=null && CommonUtil.trim(cellValue).length()>0){
            			Double value = (mcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?mcell.getNumericCellValue():((CommonUtil.isNumeric(CommonUtil.trim(cellValue)))?Double.valueOf(CommonUtil.trim(cellValue)):null);
                		if(value!=null){
                			String datestr=year;
                			datestr=datestr+"-"+(m<10?"0"+m:m);
                			datestr=datestr+"-"+(dd.length()<2?"0"+dd:dd);
                			datestr=datestr+" 08:00:00";
                			Dayev dayev=new Dayev();
                			dayev.setStcd(stcd);
                			dayev.setTm(datestr);
                			dayev.setDye(value);
                			dayev.setEptpName(emptName);
                			dataLst.add(dayev);
                		}
            		}
            	}
        	}
        }
        return dataLst;
    }
    /**
     * 解析日降雨量excel方法
     * @param inputStream
     * @param isExcel2003
     * @return
     */
    public List<StPptnDayR> parseDayPptnExcel(InputStream inputStream, boolean isExcel2003) throws IOException{
    	/** 根据版本选择创建Workbook的方式 */  
        Workbook wb = null;  
        if (isExcel2003){
        	wb = new HSSFWorkbook(inputStream);  
        }else{
        	wb = new XSSFWorkbook(inputStream);  
        }
        List<StPptnDayR> dataLst = readDayPptnExcel(wb);  
        return dataLst;  
    }
    /**
     * 读取日降雨量的excel数据
     * @param wb
     * @return
     */
    private List<StPptnDayR> readDayPptnExcel(Workbook wb){
    	int months=12;//月份
    	int days=31;//天数
    	String year=null,month=null,day=null,stcd=null;
    	List<StPptnDayR> dataLst = new ArrayList<StPptnDayR>();  
        
        /** 得到第一个shell */  
        Sheet sheet = wb.getSheetAt(0);  
        /** 得到Excel的行数 */  
        totalRows = sheet.getPhysicalNumberOfRows(); 
        //获取年份，测站编码，蒸发器类型
        Row rowTotal = sheet.getRow(1);
        Cell cellYear = rowTotal.getCell(2);  
        year=(cellYear.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(cellYear.getNumericCellValue()).intValue()):cellYear.getStringCellValue();
    	Cell cellStcd = rowTotal.getCell(5);
    	stcd=cellStcd.getStringCellValue();
        if(CommonUtil.trim(year).length()<1 || CommonUtil.trim(stcd).length()<1){
        	return dataLst;
        }
        for(int r=4;r<days+4;r++){
        	Row dr=sheet.getRow(r);
        	Cell dcell = dr.getCell(0);
        	String dd = (dcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(Double.valueOf(dcell.getNumericCellValue()).intValue()):((CommonUtil.trim(dcell.getStringCellValue()).length()>0 && CommonUtil.isNumeric(dcell.getStringCellValue()))?CommonUtil.trim(dcell.getStringCellValue()):"");
        	if(CommonUtil.trim(dd).length()>0){
        		for(int m=1;m<=months;m++){
            		Cell mcell=dr.getCell(m+1);
            		String cellValue = (mcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?String.valueOf(mcell.getNumericCellValue()):mcell.getStringCellValue();
            		if(mcell!=null && CommonUtil.trim(cellValue).length()>0 
            				&& ((mcell.getCellType()!=Cell.CELL_TYPE_NUMERIC && CommonUtil.isNumeric(CommonUtil.trim(cellValue)))||mcell.getCellType()==Cell.CELL_TYPE_NUMERIC)){
            			System.out.println("------------------r----------------"+r+"------------m------"+(m+1)+"---------value-------"+cellValue+"------type-----"+(mcell.getCellType()==Cell.CELL_TYPE_NUMERIC));
            			Double value = (mcell.getCellType()==Cell.CELL_TYPE_NUMERIC)?mcell.getNumericCellValue():((CommonUtil.isNumeric(CommonUtil.trim(cellValue)))?Double.valueOf(CommonUtil.trim(cellValue)):null);
                		if(value!=null){
                			String datestr=year;
                			datestr=datestr+"-"+(m<10?"0"+m:m);
                			datestr=datestr+"-"+(dd.length()<2?"0"+dd:dd);
                			datestr=datestr+" 08:00:00";
                			StPptnDayR dayev=new StPptnDayR();
                			dayev.setStcd(stcd);
                			dayev.setTm(datestr);
                			dayev.setDyp(value);
                			dataLst.add(dayev);
                		}
            		}
            	}
        	}
        }
        return dataLst;
    }
    /** 
     *  
     * 根据流读取Excel文件 
     *  
     *  
     * @param inputStream 
     * @param isExcel2003 
     * @return 
     * @see [类、类#方法、类#成员] 
     */  
    public List<List<String>> read(InputStream inputStream, boolean isExcel2003)  
    		throws IOException  {
    	List<List<String>> dataLst = null;  
        
        /** 根据版本选择创建Workbook的方式 */  
        Workbook wb = null;  
        
        if (isExcel2003){
        	wb = new HSSFWorkbook(inputStream);  
        }else{
        	wb = new XSSFWorkbook(inputStream);  
        }
        
        dataLst = readDate(wb);  
    	
        return dataLst;  
    }
    
    
    /** 
     *  
     * 读取数据 
     *  
     * @param wb 
     * @return 
     * @see [类、类#方法、类#成员] 
     */  
    private List<List<String>> readDate(Workbook wb)  {
    	List<List<String>> dataLst = new ArrayList<List<String>>();  
        
        /** 得到第一个shell */  
        Sheet sheet = wb.getSheetAt(0);  
          
        /** 得到Excel的行数 */  
        totalRows = sheet.getPhysicalNumberOfRows();  
        
        /** 得到Excel的列数 */  
        if (totalRows >= 1 && sheet.getRow(0) != null) {
        	totalCells = sheet.getRow(0).getPhysicalNumberOfCells(); 
        }
        
        /** 循环Excel的行 */  
        for (int r = 0; r < totalRows; r++) {
        	Row row = sheet.getRow(r);  
        	if (row == null) {
        		continue;
        	}
        	List<String> rowLst = new ArrayList<String>();  
        	/** 循环Excel的列 */  
            for (int c = 0; c < getTotalCells(); c++) {
            	 Cell cell = row.getCell(c);  
                 String cellValue = "";  
                   
                 if (null != cell){
                	// 以下是判断数据的类型  
                     switch (cell.getCellType())  
                     {  
                         case HSSFCell.CELL_TYPE_NUMERIC: // 数字  
                             cellValue = cell.getNumericCellValue() + "";  
                             break;  
                           
                         case HSSFCell.CELL_TYPE_STRING: // 字符串  
                             cellValue = cell.getStringCellValue();  
                             break;  
                           
                         case HSSFCell.CELL_TYPE_BOOLEAN: // Boolean  
                             cellValue = cell.getBooleanCellValue() + "";  
                             break;  
                           
                         case HSSFCell.CELL_TYPE_FORMULA: // 公式  
                             cellValue = cell.getCellFormula() + "";  
                             break;  
                           
                         case HSSFCell.CELL_TYPE_BLANK: // 空值  
                             cellValue = "";  
                             break;  
                           
                         case HSSFCell.CELL_TYPE_ERROR: // 故障  
                             cellValue = "非法字符";  
                             break;  
                           
                         default:  
                             cellValue = "未知类型";  
                             break;  
                     }  
                 }
                 rowLst.add(cellValue);  
            }
            /** 保存第r行的第c列 */  
            dataLst.add(rowLst);  
        }
    	
        return dataLst; 
    }
    
    
    /** 
     *  
     * 按指定坐标读取实体数据 
     * <按顺序放入带有注解的实体成员变量中> 
     *  
     * @param wb 工作簿 
     * @param t 实体 
     * @param in 输入流 
     * @param integers 指定需要解析的坐标 
     * @return T 相应实体 
     * @throws IOException 
     * @throws Exception 
     * @see [类、类#方法、类#成员] 
     */  
    @SuppressWarnings("unused")
	public static <T> T readDateT(Workbook wb, T t, InputStream in, Integer[]... integers)  
            throws IOException, Exception  {
    	
    	// 获取该工作表中的第一个工作表  
        Sheet sheet = wb.getSheetAt(0);  
          
        // 成员变量的值  
        Object entityMemberValue = "";  
          
        // 所有成员变量  
        Field[] fields = t.getClass().getDeclaredFields();  
        // 列开始下标  
        int startCell = 0;  
          
        /** 循环出需要的成员 */  
        for (int f = 0; f < fields.length; f++){
        	fields[f].setAccessible(true);  
            String fieldName = fields[f].getName();  
            boolean fieldHasAnno = fields[f].isAnnotationPresent(IsNeeded.class);  
            // 有注解  
            if (fieldHasAnno){
            	IsNeeded annotation = fields[f].getAnnotation(IsNeeded.class);  
                boolean isNeeded = annotation.isNeeded();  
                
                // Excel需要赋值的列  
                if (isNeeded) {
                	// 获取行和列  
                    int x = integers[startCell][0] - 1;  
                    int y = integers[startCell][1] - 1;  
                      
                    Row row = sheet.getRow(x);  
                    Cell cell = row.getCell(y);  
                    
                    if (row == null) {
                    	continue;
                    }
                    
                    // Excel中解析的值  
                    String cellValue = getCellValue(cell);  
                    // 需要赋给成员变量的值  
                    entityMemberValue = getEntityMemberValue(entityMemberValue, fields, f, cellValue);  
                    // 赋值  
                    PropertyUtils.setProperty(t, fieldName, entityMemberValue);  
                    // 列的下标加1  
                    startCell++;
                }
            }  
        }
    	
    	return t; 
    }
    
    /** 
     *  
     * 读取列表数据  
     * <按顺序放入带有注解的实体成员变量中> 
     *  
     * @param wb 工作簿 
     * @param t 实体 
     * @param beginLine 开始行数 
     * @param totalcut 结束行数减去相应行数 
     * @return List<T> 实体列表 
     * @throws Exception 
     * @see [类、类#方法、类#成员] 
     */  
    @SuppressWarnings("unchecked")
	public static <T> List<T> readDateListT(Workbook wb, T t, int beginLine, int totalcut)  
            throws Exception  {
    	
    	List<T> listt = new ArrayList<T>();  
        
        /** 得到第一个shell */  
        Sheet sheet = wb.getSheetAt(0);  
          
        /** 得到Excel的行数 */  
        totalRows = sheet.getPhysicalNumberOfRows();  
        
        /** 得到Excel的列数 */  
        if (totalRows >= 1 && sheet.getRow(0) != null){
        	totalCells = sheet.getRow(0).getPhysicalNumberOfCells();  
        }
        
        /** 循环Excel的行 */  
        for (int r = beginLine - 1; r < totalRows - totalcut; r++) {
        	Object newInstance = t.getClass().newInstance();  
            Row row = sheet.getRow(r);  
            if (row == null) {
            	continue;
            }
            
            // 成员变量的值  
            Object entityMemberValue = "";  
              
            // 所有成员变量  
            Field[] fields = t.getClass().getDeclaredFields();  
            // 列开始下标  
            int startCell = 0;  
              
            for (int f = 0; f < fields.length; f++) {
            	fields[f].setAccessible(true);  
                String fieldName = fields[f].getName();  
                boolean fieldHasAnno = fields[f].isAnnotationPresent(IsNeeded.class);  
                // 有注解  
                if (fieldHasAnno) {
                	IsNeeded annotation = fields[f].getAnnotation(IsNeeded.class);  
                    boolean isNeeded = annotation.isNeeded();  
                    // Excel需要赋值的列  
                    if (isNeeded) {
                    	Cell cell = row.getCell(startCell);  
                        String cellValue = getCellValue(cell);  
                        entityMemberValue = getEntityMemberValue(entityMemberValue, fields, f, cellValue);  
                        // 赋值  
                        PropertyUtils.setProperty(newInstance, fieldName, entityMemberValue);  
                        // 列的下标加1  
                        startCell++; 
                    }
                }
            }
            listt.add((T)newInstance);  
        }
        
    	return listt;
    }
    
    /** 
     *  
     * 根据Excel表格中的数据判断类型得到值 
     *  
     * @param cell 
     * @return 
     * @see [类、类#方法、类#成员] 
     */  
    private static String getCellValue(Cell cell) {
    	String cellValue = "";  
        
        if (null != cell) {
        	// 以下是判断数据的类型  
            switch (cell.getCellType()) {
            case HSSFCell.CELL_TYPE_NUMERIC: // 数字  
                if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell)){  
                	Date theDate = cell.getDateCellValue();  
                    SimpleDateFormat dff = new SimpleDateFormat("yyyy-MM-dd");  
                    cellValue = dff.format(theDate);  
                }else {  
                    DecimalFormat df = new DecimalFormat("0");  
                    cellValue = df.format(cell.getNumericCellValue());  
                }  
                break;  
            case HSSFCell.CELL_TYPE_STRING: // 字符串  
                cellValue = cell.getStringCellValue();  
                break;  
              
            case HSSFCell.CELL_TYPE_BOOLEAN: // Boolean  
                cellValue = cell.getBooleanCellValue() + "";  
                break;  
              
            case HSSFCell.CELL_TYPE_FORMULA: // 公式  
                cellValue = cell.getCellFormula() + "";  
                break;  
              
            case HSSFCell.CELL_TYPE_BLANK: // 空值  
                cellValue = "";  
                break;  
              
            case HSSFCell.CELL_TYPE_ERROR: // 故障  
                cellValue = "非法字符";  
                break;  
              
            default:  
                cellValue = "未知类型";  
                break;  
            }
        }
    	return cellValue;
    }
    
    
    /** 
     *  
     * 根据实体成员变量的类型得到成员变量的值 
     *  
     * @param realValue 
     * @param fields 
     * @param f 
     * @param cellValue 
     * @return 
     * @see [类、类#方法、类#成员] 
     */  
    private static Object getEntityMemberValue(Object realValue, Field[] fields, int f, 
    		String cellValue) {
    	String type = fields[f].getType().getName();  
        switch (type){
	        case "char":  
	        case "java.lang.Character":  
	        case "java.lang.String":  
	            realValue = cellValue;  
	            break;  
	        case "java.util.Date":  
	            realValue = StringUtils.isBlank(cellValue) ? null : DateUtil.strToDate(cellValue, "yyyy-MM-dd");  
	            break;  
	        case "java.lang.Integer":  
	            realValue = StringUtils.isBlank(cellValue) ? null : Integer.valueOf(cellValue);  
	            break;  
	        case "int":  
	        case "float":  
	        case "double":  
	        case "java.lang.Double":  
	        case "java.lang.Float":  
	        case "java.lang.Long":  
	        case "java.lang.Short":  
	        case "java.math.BigDecimal":  
	            realValue = StringUtils.isBlank(cellValue) ? null : new BigDecimal(cellValue);  
	            break;  
	        default:  
	            break;  
        }
    	return realValue;
    }
    
    
    /** 
     *  
     * 根据路径或文件名选择Excel版本 
     *  
     *  
     * @param filePathOrName 
     * @param in 
     * @return 
     * @throws IOException 
     * @see [类、类#方法、类#成员] 
     */  
    public static Workbook chooseWorkbook(String filePathOrName, InputStream in)  
            throws IOException {
    	
    	/** 根据版本选择创建Workbook的方式 */  
        Workbook wb = null;  
        boolean isExcel2003 = ExcelVersionUtil.isExcel2003(filePathOrName);  
          
        if (isExcel2003) {
        	wb = new HSSFWorkbook(in);  
        }else{
        	wb = new XSSFWorkbook(in);  
        }
    	return wb;
    }
    
}
