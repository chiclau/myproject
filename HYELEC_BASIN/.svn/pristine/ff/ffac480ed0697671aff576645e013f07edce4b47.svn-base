<%@ page language="java" pageEncoding="UTF-8"%>
<%@ taglib prefix="s" uri="/struts-tags"%>
<!DOCTYPE html>
<html lang="zh-cn">
<head>
<title>资料管理</title>
</head>
<%@include file="/common/inc/inc.inc"%>
<%@include file="/common/inc/bootstrapTable.inc"%>
<body style="background-color: #FCFCFC;">
	<div class="container-fluid">
		<%@include file="/common/inc/top.jsp"%>
		<div id="main" style="width: 600px;height:400px;"></div>
		<input type="button" value="获取图表数据" onclick="getMyChart()">
		<div id="hszlb_chart" style="width: 600px;height:400px;highlight-color:#000000;margin-top: 20px"></div>
	</div>
</body>
<script src="http://echarts.baidu.com/dist/echarts.min.js"></script>
<script>
$(function(){
	getChartDemo();
})
function getMyChart(){
	console.log(myChart.getOption().series[0].data[0]);
	console.log(myChart2.getOption());
	alert(data3)
}
var symbolSize = 20;
var data = [["2018-04-01 20:00:00","5.0"],["2018-04-01 21:00:00","3.0"],["2018-04-01 22:00:00","2.0"],["2018-04-01 23:00:00","1.0"]];
var data3 = [["2018-04-01 20:00:00","5.0"],["2018-04-01 21:00:00","3.0"],["2018-04-01 22:00:00","2.0"],["2018-04-01 23:00:00","1.0"]];
var data2 = [["2018-06-06 01:20:00", 1],["2018-06-06 05:20:00", 3],["2018-06-06 10:20:00", 6]
			,["2018-06-06 15:20:00", 4],["2018-06-06 20:20:00", 3],["2018-06-07 00:00:00", 30]];
var lineData = [["2018-04-02 08:07:47",		"38.31"],
	["2018-04-02 08:00:00",		"38.29"],
	["2018-04-02 07:33:45",		"38.29"],
	["2018-04-02 07:00:00",		"38.27"],
	["2018-04-02 06:48:46",		"38.27"],
	["2018-04-02 06:00:00",		"38.29"],
	["2018-04-02 05:00:00",		"38.29"],
	["2018-04-02 04:00:00",		"3.29"],
	["2018-04-02 03:00:00",		"3.29"],
	["2018-04-02 02:00:00",		"3.29"],
	["2018-04-02 01:01:44",		"3.29"],
	["2018-04-02 01:00:00",		"38.28"],
	["2018-04-02 00:00:00",		"38.28"],
	["2018-04-01 23:00:00",		"38.28"],
	["2018-04-01 22:00:00",		"38.28"],
	["2018-04-01 21:00:00",		"38.28"],
	["2018-04-01 20:26:44",		"38.28"],
	["2018-04-01 20:00:00",		"38.26"]];
var barData = [["2018-04-02 08:00:00",		"5.0"],
	["2018-04-02 07:00:00",		"2.0"],
	["2018-04-02 06:00:00",		"3.5"],
	["2018-04-02 05:00:00",		"5.0"],
	["2018-04-02 04:00:00",		"5.5"],
	["2018-04-02 03:00:00",		"5.0"],
	["2018-04-02 00:00:00",		"1.0"],
	["2018-04-01 23:00:00",		"5.5"],
	["2018-04-01 22:00:00",		"2.0"],
	["2018-04-01 21:00:00",		"3.5"],
	["2018-04-01 20:00:00",		"3.0"]];

var myChart = echarts.init(document.getElementById('main'));
function getChartDemo(){
	myChart.setOption({
		title : {
            text: "降雨量流量关系图",//主标题
            //subtext: '2009-6-12 2:00 - 2009-10-18 8:00',//副标题
            x: 'center',//标题剧中
            padding:0
        },
        color:['#000000','#0000EE','#6699FF','#FF8833','#6666FF','#FF9966','#66CCFF','#FFCC66','#99CCFF','#FFCC99','#CCFFFF'],
        grid: {
            left: '3%',
            right: '4%',
            top:20,
            bottom: 30,
            containLabel: true
        },
	    tooltip : {//鼠标悬浮提示信息
	        trigger: 'axis',//显示横坐标信息
	        axisPointer: {//xy提示轴线
	            type: 'cross',
	            label: {
	                backgroundColor: '#505765'
	            }
	        }
	    },
	    legend: {//*
            data:["流量", "降雨量"], //最上边的切换按钮
            //x: 'left'//按钮位置
            bottom:0
        },
        xAxis : [
            {
                splitLine:{show: false},//去除网格线
                type : 'time',
                min:"2018-04-01 20:00",
                max:"2018-04-02 09:00",
            },
            {
                splitLine:{show: false},//去除网格线
                type : 'time',
                axisLine: {
                    onZero: false,
                }
            }
        ],
	    /* xAxis: {
	    	type : 'time',
	        min:"2018-06-06 00:00:00",
	        max:"2018-06-07 00:00:00",
	    }, */
	    /* yAxis: {
	        min: -30,
	        max: 60,
	        type: 'value',
	    }, */
	    yAxis: [{
	    	max:60,
	    	min:0,
	    	name:"流量",
	    	splitLine:{show: false},
	    	type:"value"
	    	},{
    		inverse:true,
    		max:20,
    		min:0,
    		name:"降雨量",
    		nameLocation:"start",
    		splitLine:{show: false},
    		type:"value"
	    	}
	    ],
	    series: [
	        {
	            id: 'c',
	            type: 'line',
	            smooth: true,
	            symbolSize: symbolSize,
	            data: data
	        },
	        {
	            /* type: 'line',
	            data: lineData
	             */
	            "name":"流量",
                "type":'line',
                "showSymbol": false,
                "lineStyle": {
                "normal":
                {
                "width": 1.5
                }
                },
                "data":lineData
	        },
	        {
	            /* type: 'bar',
	            data: barData */
	            
	            "name":'降雨量',
                "type":'bar',
                "yAxisIndex":1,
                "barWidth":10,
                "data":barData
	        }
	    ],
	});

	myChart.setOption({
	    graphic: echarts.util.map(data, function (item, dataIndex) {
	    	console.log(data);
	        return {
	            type: 'circle',
	            position: myChart.convertToPixel('grid', item),
	            shape: {
	                r: symbolSize / 2
	            },
	            invisible: true,
	            draggable: true,
	            ondrag: echarts.util.curry(onPointDragging, dataIndex),
	            onmousemove: echarts.util.curry(showTooltip, dataIndex),
	            onmouseout: echarts.util.curry(hideTooltip, dataIndex),
	            z: 100
	        };
	    })
	});
}

window.addEventListener('resize', function () {
    myChart.setOption({
        graphic: echarts.util.map(data, function (item, dataIndex) {
            return {
                position: myChart.convertToPixel('grid', item)
            };
        })
    });
    myChart2.setOption({
        graphic: echarts.util.map(data, function (item, dataIndex) {
            return {
                position: myChart2.convertToPixel('grid', item)
            };
        })
    });
});

function showTooltip(dataIndex) {
    myChart.dispatchAction({
        type: 'showTip',
        seriesIndex: 0,
        dataIndex: dataIndex
    });
}

function hideTooltip(dataIndex) {
    myChart.dispatchAction({
        type: 'hideTip'
    });
}

function onPointDragging(dataIndex, dx, dy) {
    data[dataIndex] = myChart.convertFromPixel('grid', this.position);
    myChart.setOption({
        series: [{
            id: 'c',
            data: data
        }]
    });
}










/* ==========================================DateChart=============================================== */


var myChart2 = echarts.init(document.getElementById("hszlb_chart"));
getHszlbGxt("hszlb_chart","testsyq_1-n.json","");
	    //getGqgcGxt("bzgk",basePath+"/work/pmpPowerChart/pmpcd="+code+'&start='+start_date+'&end='+end_date);
	    function getHszlbGxt(chart,url,data) {
	        $.ajax({
	            url : url,
	            type : "get",
	            dataType : "JSON",
	            async : false,
	            traditional: true,
	            // data : data,
	            success : function(response) {
	                getChart(chart,response);
	            }
	        });
	    }

	    function  getChart(chart,response) {
    		var series = getSeries(response.DATA);
		    var yAxis = getYAxis(response.DATA);
		    var legend_data= getLegend_data(response.DATA);
		    var title = response.EXTRADATA.CHARTTITLE;
		    var start = response.EXTRADATA.START;
		    var end = response.EXTRADATA.END;
		// 指定图表的配置项和数据
		    var option = {
		        title : {
		            text: title,//主标题
		            //subtext: '2009-6-12 2:00 - 2009-10-18 8:00',//副标题
		            x: 'center',//标题剧中
		            padding:0
		        },
		        color:['#000000','#0000EE','#6699FF','#FF8833','#6666FF','#FF9966','#66CCFF','#FFCC66','#99CCFF','#FFCC99','#CCFFFF'],
		        grid: {
		            left: '3%',
		            right: '4%',
		            top:20,
		            bottom: 30,
		            containLabel: true
		        },
		        tooltip : {//鼠标悬浮提示信息
		            trigger: 'axis',//显示横坐标信息
		            axisPointer: {//xy提示轴线
		                type: 'cross',
		                label: {
		                    backgroundColor: '#505765'
		                }
		            }
		        },
		        legend: {
		            data:legend_data, //最上边的切换按钮
		            //x: 'left'//按钮位置
		            bottom:0
		        },
		        xAxis : [
		            {
		                splitLine:{show: false},//去除网格线
		                type : 'time',
		                min:start,
		                max:end,
		            },
		            {
		                splitLine:{show: false},//去除网格线
		                type : 'time',
		                axisLine: {
		                    onZero: false,
		                }
		            }
		        ],
		        yAxis: yAxis,
		        series:  series
		    };
	
	
		// 使用刚指定的配置项和数据显示图表。
		    myChart2.setOption(option);
			console.log(series);
			console.log(myChart2.getOption().series)
		
		    myChart2.setOption({
		        graphic: echarts.util.map(data, function (item, dataIndex) {
		        	console.log(data);
		            return {
		                type: 'circle',
		                position: myChart2.convertToPixel('grid', item),
		                shape: {
		                    r: symbolSize / 2
		                },
		                invisible: true,
		                draggable: true,
		                ondrag: echarts.util.curry(onPointDragging2, dataIndex),
		                onmousemove: echarts.util.curry(showTooltip2, dataIndex),
		                onmouseout: echarts.util.curry(hideTooltip2, dataIndex),
		                z: 100
		            };
		        })
		    });
		}
	    function getYAxis(data){
	        var temp = new Array(data.length);
	        for(var i = 0 ; i < data.length ; i < i++){
	            if(data[i].TYPE == "line"){
	                temp[i] = {
	                    "splitLine":{"show": false},//去除网格线
	                    "name": data[i].NAME,
	                    "type": "value",
	                    "max":data[i].MAX,
	                    "min":data[i].MIN
	                }
	            }else if(data[i].TYPE == "bar"){
	                temp[i] = {
	                    "splitLine":{show: false},//去除网格线
	                    "name": data[i].NAME,
	                    "nameLocation": 'start',
	                    "type": 'value',
	                    "inverse": true,//反向坐标
	                    "max":data[i].MAX,
	                    "min":data[i].MIN
	                }
	            }

	        }
	        console.log(temp)
	        return temp;
	    }
	    function getSeries(data){
	        var temp = new Array();
	        for(var i = 0 ; i<data.length ;i++){
	            if(data[i].TYPE == "bar"){
	                temp[i] = {
	                    "name":data[i].NAME,
	                    "type":data[i].TYPE,
	                    "yAxisIndex":1,
	                    "barWidth":10,
	                    "data":data[i].DATA
	                };
	            }else if(data[i].TYPE == "line"){
	                temp[i] = {
	                    "name":data[i].NAME,
	                    "type":data[i].TYPE,
	                    "showSymbol": false,
	                    "lineStyle": {
	                    "normal":
	                    {
	                    "width": 1.5
	                    }
	                    },
	                    "data":data[i].DATA
	                };
	            }

	        }
	        temp[data.length] = {
        		"id": "a",
                "type": "line",
                "smooth": true,
                "symbolSize": symbolSize,
                "data": data3
        		/* id: 'a',
        		"type":"line",
                data: data2 */
	        }
	        return temp;
	    }
	    function getLegend_data(data) {
	        var temp = new Array(data.length);
	        for(var i = 0 ; i < data.length ; i < i++){
	            temp[i] = data[i].NAME;
	        }
	        return temp;
	    }

	    function showTooltip2(dataIndex) {
	        myChart2.dispatchAction({
	            type: 'showTip',
	            seriesIndex: 0,
	            dataIndex: dataIndex
	        });
	    }

	    function hideTooltip2(dataIndex) {
	        myChart2.dispatchAction({
	            type: 'hideTip'
	        });
	    }

	    function onPointDragging2(dataIndex, dx, dy) {
	        data3[dataIndex] = myChart2.convertFromPixel('grid', this.position);
	        myChart2.setOption({
	            series: [{
	                "id": 'a',
	                type:'line',
	                data: data3
	            }]
	        });
	    }





</script>
</html>
<!-- 不要改变以下引用顺序 -->