package com.lyht.business.consumer.hydrologicalData.service;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.lyht.base.hibernate.common.PageResults;
import com.lyht.business.consumer.hydrologicalData.bean.Zvarl;
import com.lyht.business.consumer.hydrologicalData.dao.ZvarlDao;
import com.lyht.business.consumer.hydrologicalData.formbean.ZvarlFormBean;
import com.lyht.util.DateUtil;
import com.lyht.util.ExcelUtils;
import com.lyht.util.ExcelVersionUtil;
import com.lyht.util.ImportExeclUtil;
import com.lyht.util.Randomizer;

@Service
@Scope("prototype")
@Transactional
@SuppressWarnings("rawtypes")
public class ZvarlService {

	@Resource
	private ZvarlDao mZvarlDao;
	
	/**
	 * 获取（湖）容曲线曲线列表数据
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public PageResults getZvarlListData(ZvarlFormBean mZvarlFormBean){
		return mZvarlDao.getZvarlListData(mZvarlFormBean);
	}
	
	/**
	 * 根据主键ID获取实体
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public List<Zvarl> getZvarlInfoById(String stcd){
		List<Zvarl> mZvarlList =new ArrayList<Zvarl>();
		if(!"".equals(stcd)){
			mZvarlList=mZvarlDao.getZvarlInfoById(stcd);
		}
		return mZvarlList;
	}
	
	/**
	 * 增加实体对象
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public Zvarl create(Zvarl mZvarl){
		int i=mZvarlDao.count();
		mZvarlDao.saveZvarlInfo(mZvarl,i);
		return mZvarl;
	}
	
	/**
	 * 根据测站编号与时间修改或新增库（湖）容曲线信息
	 * */
	public void createX(ZvarlFormBean mZvarlFormBean,String []ptno,
			String []rz,String []w,String []wsfa){
		if(!"".equals(ptno) && !"".equals(rz) && !"".equals(w) && !"".equals(wsfa)){
			String str ="";
			ArrayList<String> arrayList = new ArrayList<>();
			for (int i = 0; i < ptno.length; i++) {
				arrayList.add(ptno[i]);
			}
			List lists=mZvarlDao.getZvarlInfoByParams(mZvarlFormBean);
			for (Object object : lists) {
				String[] split = object.toString().split("=");
				String[] split2 = split[1].toString().split("}");
				str = split2[0].toString();
				if(!arrayList.contains(str)){
					mZvarlDao.delptno(mZvarlFormBean,str);
				}
			}
			for(int i=0,j=0,k=0,l=0;i<ptno.length&&j<rz.length&&k<w.length&&l<wsfa.length;i++,j++,k++,l++){
				List<Map> list=mZvarlDao.getZvarlInfoByParams(mZvarlFormBean,ptno[i]);
				if(list.size()>0){
					mZvarlDao.updateZvarlInfoByParams(mZvarlFormBean,ptno[i],rz[j],w[k],wsfa[l]);
				}else{
					mZvarlDao.insertZvarlInfoByParams(mZvarlFormBean,ptno[i],rz[j],w[k],wsfa[l]);
				}
			}
		}
	}
	
	/**
	 * 修改实体对象
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public Zvarl update(Zvarl mZvarl){
		mZvarlDao.updateZvarlInfo(mZvarl);	
		return mZvarl;
	}
	
	/**
	 * 根据主键ID获取 实体
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public List<Zvarl> getZvarlInfoListByIds(String ids){
		List<Zvarl> mZvarlList=new ArrayList<Zvarl>();
		Zvarl mZvarl = new Zvarl();
		String[] idary=ids.split(",");
		for(int i=0;i<idary.length;i++){
			 mZvarl = mZvarlDao.getZvarlInfoById_(idary[i]);
			 mZvarlList.add(mZvarl);
		}
		return mZvarlList;
	}
	
	/**
	 * 根据主键ID删除 实体
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void deletZvarlInfoByIds(String []stcd,String []mstm,String []ptno,String flag){
		if(null==flag ||"".equals(flag)){
			for(int i=0,j=0,k=0;i<stcd.length && j<mstm.length && k<ptno.length;i++,k++,j++){
				String []stcd_=stcd[i].split(",");
				String []ptno_=ptno[k].split(",");
				for(int ii=0,kk=0;ii<stcd_.length && kk<ptno_.length;ii++,kk++){
					mZvarlDao.deletZvarlInfoByIds_(stcd_[ii],ptno_[kk]);
				}
			}
		}else{
			for(int i=0,j=0;i<stcd.length && j<mstm.length;i++,j++){
				mZvarlDao.deletZvarlInfoByIds(stcd[i],mstm[j]);
			}
		}
	}
	/**
	 * 导出（湖）容曲线列表数据
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void export(ZvarlFormBean mZvarlFormBean,PageResults prs,HttpServletRequest request,HttpServletResponse response) throws IOException{
		String year = DateUtil.getYear();//年
		String method = DateUtil.getMonth();//月
		String day = DateUtil.getDay();//日
		String replace="（湖）容曲线曲线_"+year + "年" + method + "月" +day + "日";
		String title="（湖）容曲线曲线";
		String [] tab = {"序号","测站编码","施测时间","曲线序号","库水位","蓄水量","水面面积","修改时间"};
		String [] val = {"STCD","MSTM","PTNO","RZ","W","WSFA","MODITIME"};
		List result=mZvarlDao.getZvarlListData_export(mZvarlFormBean).getResults();
		String file = ExcelUtils.SellerStat2Excel(result, request, replace,tab,title,val);
		response.setContentType("multipart/form-data");  
		String path = request.getSession().getServletContext().getRealPath("/")+file;
		response.setHeader("Content-Disposition", "attachment;fileName="+new String(file.getBytes("UTF-8"),"ISO8859-1"));
        //通过文件路径获得File对象(假如此路径中有一个download.pdf文件)  
        File files = new File(path);
        FileInputStream inputStream = new FileInputStream(files);
        ServletOutputStream out= response.getOutputStream();
        int b = 0;  
        byte[] buffer = new byte[1024];  
        while (b != -1){  
            b = inputStream.read(buffer);  
            //4.写到输出流(out)中  
            out.write(buffer,0,b);  
        }  
        inputStream.close();  
        out.close();  
        out.flush();
	}
	
	/**
	 * 导入数据
	 * @throws IOException 
	 */
	@SuppressWarnings("static-access")
	@Transactional(propagation=Propagation.REQUIRED)
	public void importPptn(File[] file,String[] fileFileName) throws IOException{
		String stcd=Randomizer.nextNumber("zvar", 4);
		File[] srcFiles = file;
		InputStream in = null;
		ExcelVersionUtil ev=new ExcelVersionUtil();
		ImportExeclUtil importExeclUtil=new ImportExeclUtil();
		for(int i = 0; i < srcFiles.length; i++){
			in = new BufferedInputStream(new FileInputStream(srcFiles[i]));
			boolean isExcel2003 = true;// 根据文件名判断文件是2003版本还是2007版本  
            if (ev.isExcel2007(fileFileName[i])) {  
                isExcel2003 = false;  
            }
            //通过工具栏ImportExeclUtil中的read方法解析excel
            List<List<String>> dataLst =importExeclUtil.read(in,isExcel2003);
            for(int j=1;j<dataLst.size();j++){
            	List<String> list=dataLst.get(j);
            	Zvarl mZvarl=new Zvarl();
            	mZvarl.setStcd(stcd);
            	mZvarl.setMstm(list.get(2));
            	mZvarl.setPtno(Double.parseDouble(list.get(3)));
            	mZvarl.setRz(Double.parseDouble(list.get(4)));
            	mZvarl.setW(Double.parseDouble(list.get(5)));
            	mZvarl.setWsfa(Double.parseDouble(list.get(6)));
            	mZvarl.setModitime(list.get(7));
            	mZvarlDao.save(mZvarl);
            }
		}
	}
}
