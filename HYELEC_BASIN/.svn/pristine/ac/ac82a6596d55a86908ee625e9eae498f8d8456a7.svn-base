package com.lyht.business.consumer.hydrologicalData.service;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.lyht.base.hibernate.common.PageResults;
import com.lyht.business.analysisCalculation.bean.DicEmpt;
import com.lyht.business.analysisCalculation.dao.DicEmptDao;
import com.lyht.business.consumer.hydrologicalData.bean.Dayev;
import com.lyht.business.consumer.hydrologicalData.dao.DayevDao;
import com.lyht.business.consumer.hydrologicalData.dao.StbprpDao;
import com.lyht.business.consumer.hydrologicalData.formbean.DayevFormBean;
import com.lyht.util.CommonUtil;
import com.lyht.util.DateUtil;
import com.lyht.util.ExcelUtils;
import com.lyht.util.ExcelVersionUtil;
import com.lyht.util.ImportExeclUtil;

@Service
@Scope("prototype")
@Transactional
@SuppressWarnings("rawtypes")
public class DayevService {

	@Resource
	private DayevDao mDayevDao;
	@Resource
	private StbprpDao mStbprpDao;
	@Resource
	private DicEmptDao dicEmptDao;
	
	public List<DicEmpt> queryEmptList(){
		return dicEmptDao.m_queryAllList();
	}
	/**
	 * 获取日蒸发量列表数据
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public PageResults getDayevListData(DayevFormBean mDayevFormBean){
		return mDayevDao.getDayevListData(mDayevFormBean);
	}
	
	/**
	 * 根据主键ID获取实体
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public Dayev getDayevInfoById(DayevFormBean mDayevFormBean){
		return mDayevDao.getDayevInfoById(mDayevFormBean);
	}
	
	/**
	 * 增加实体对象
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void create(Dayev mDayev){
		mDayevDao.saveDayevInfo(mDayev);
	}
	
	/**
	 * 修改实体对象
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void update(Dayev mDayev){
		mDayevDao.updateDayevInfo(mDayev);	
	}
	
	/**
	 * 根据主键ID删除 实体
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void deletDayevInfoByIds(DayevFormBean mDayevFormBean){
		String[] idary=mDayevFormBean.getmDayevInfoBean().getStcd().split(",");
		String[] idary_=mDayevFormBean.getmDayevInfoBean().getTm().split(",");
		for(int i=0,j=0;i<idary.length&&j<idary_.length;i++,j++){
			mDayevDao.deletDayevInfoByIds(idary[i],idary_[j]);
		}
	}
	/**
	 * 导出（湖）容曲线列表数据
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void export(DayevFormBean mDayevFormBean,PageResults prs,HttpServletRequest request,HttpServletResponse response) throws IOException{
		String year = DateUtil.getYear();//年
		String method = DateUtil.getMonth();//月
		String day = DateUtil.getDay();//日
		String replace="日蒸发量_"+year + "年" + method + "月" +day + "日";
		String title="日蒸发量";
		String [] tab = {"序号","测站编码","时间","蒸发器类型","日蒸发量"};
		String [] val = {"STNM","TM","EPTP","DYE"};
		List result=mDayevDao.getDayevListData_export(mDayevFormBean).getResults();
		String file = ExcelUtils.SellerStat2Excel(result, request, replace,tab,title,val);
		response.setContentType("multipart/form-data");  
		String path = request.getSession().getServletContext().getRealPath("/")+file;
		response.setHeader("Content-Disposition", "attachment;fileName="+new String(file.getBytes("UTF-8"),"ISO8859-1"));
        //通过文件路径获得File对象(假如此路径中有一个download.pdf文件)  
        File files = new File(path);
        FileInputStream inputStream = new FileInputStream(files);
        ServletOutputStream out= response.getOutputStream();
        int b = 0;  
        byte[] buffer = new byte[1024];  
        while (b != -1){  
            b = inputStream.read(buffer);  
            //4.写到输出流(out)中  
            out.write(buffer,0,b);  
        }  
        inputStream.close();  
        out.close();  
        out.flush();
	}
	
	/**
	 * 导入数据
	 * @throws IOException 
	 */
	@SuppressWarnings("static-access")
	@Transactional(propagation=Propagation.REQUIRED)
	public Hashtable<String,String> importPptn(File[] file,String[] fileFileName) throws IOException{
		Hashtable<String,String> table = new Hashtable<String,String>();
		File[] srcFiles = file;
		InputStream in = null;
		ExcelVersionUtil ev=new ExcelVersionUtil();
		ImportExeclUtil importExeclUtil=new ImportExeclUtil();
		for(int i = 0; i < srcFiles.length; i++){
			in = new BufferedInputStream(new FileInputStream(srcFiles[i]));
			boolean isExcel2003 = true;// 根据文件名判断文件是2003版本还是2007版本  
            if (ev.isExcel2007(fileFileName[i])) {  
                isExcel2003 = false;  
            }
            //通过工具栏ImportExeclUtil中的read方法解析excel
            List<Dayev> dataLst =importExeclUtil.parseDayevExcel(in,isExcel2003);
            if(dataLst==null || dataLst.size()<1){
            	table.put("reflag", "0");
            	table.put("message", "Excel表格中未解析到数据!");
            	return table;
            }
            //校验数据
            for(int a=0;a<dataLst.size();a++){
            	Dayev pp = dataLst.get(a);
            	if(pp!=null){
            		if(CommonUtil.trim(pp.getEptpName()).length()>0){
            			List<DicEmpt> emptList = dicEmptDao.findBy("empt", CommonUtil.trim(pp.getEptpName()));
            			if(emptList!=null && emptList.size()>0){
            				DicEmpt empt=emptList.get(0);
            				pp.setEptp(empt.getId());
            			}else{
            				DicEmpt empt = new DicEmpt();
            				empt.setEmpt(CommonUtil.trim(pp.getEptpName()));
            				dicEmptDao.save(empt);
            				pp.setEptp(empt.getId());
            			}
            		}
            		mDayevDao.saveOrUpdate(pp);
            	}
            }
		}
		table.put("reflag", "1");
    	return table;
	}
}
