package com.lyht.business.consumer.hydrologicalData.service;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.lyht.base.hibernate.common.PageResults;
import com.lyht.business.consumer.hydrologicalData.bean.River;
import com.lyht.business.consumer.hydrologicalData.dao.RiverDao;
import com.lyht.business.consumer.hydrologicalData.dao.StbprpDao;
import com.lyht.business.consumer.hydrologicalData.formbean.RiverFormBean;
import com.lyht.util.CommonUtil;
import com.lyht.util.DateUtil;
import com.lyht.util.ExcelUtils;
import com.lyht.util.ExcelVersionUtil;
import com.lyht.util.ImportExeclUtil;

@Service
@Scope("prototype")
@Transactional
@SuppressWarnings("rawtypes")
public class RiverService {

	@Resource
	private RiverDao mRiverDao;
	@Resource
	private StbprpDao mStbprpDao;
	
	@SuppressWarnings("unchecked")
	public Hashtable<String,Object> queryRiverEchartData(String stcd,String beginTime,String endTime,String interval){
		Hashtable<String,Object> table = new Hashtable<String,Object>();
		List<Map> resultList = new ArrayList<Map>();
		List<String> xList = new ArrayList<String>();
		List<Double> yList = new ArrayList<Double>();
		List<Map> relist = mRiverDao.queryRiverEchartData(stcd,beginTime, endTime);
		if(relist!=null && relist.size()>0){
			String startTime=null;
			double startQ=0;
			String nextTime=null;
			for(int i=0;i<relist.size();i++){
				Map map = relist.get(i);
				if(map!=null && CommonUtil.trim(map.get("DT").toString()).length()>0
						&& CommonUtil.trim(map.get("Q").toString()).length()>0){
					String dt = CommonUtil.trim(map.get("DT").toString());
					double q = CommonUtil.getFloatValue(CommonUtil.trim(map.get("Q").toString()));
					if(CommonUtil.trim(startTime).length()<1){
						Map result=new HashMap();
						result.put("DT", dt);
						result.put("Q", q);
						result.put("name", dt);
						result.put("value", q);
						resultList.add(result);
						xList.add(dt);
						yList.add(q);
						startTime = dt+":00";
						startQ=q;
						nextTime = CommonUtil.getAfterMinitsDateTime(dt+":00", Integer.valueOf(interval));
					}else{
						if(nextTime.equals(dt+":00")){
							Map result=new HashMap();
							result.put("DT", nextTime.substring(0, 16));
							result.put("Q", q);
							result.put("name", nextTime.substring(0, 16));
							result.put("value", q);
							resultList.add(result);
							xList.add(nextTime.substring(0, 16));
							yList.add(q);
							startTime = dt+":00";
							startQ=q;
							nextTime = CommonUtil.getAfterMinitsDateTime(dt+":00", Integer.valueOf(interval));
						}else if(!CommonUtil.compareMoreDateTime(nextTime, dt+":00")){
							while(CommonUtil.compareLessDateTime(nextTime, dt+":00")){
								long t21=CommonUtil.getDifferenceTime(startTime, dt+":00");
								long tx1=CommonUtil.getDifferenceTime(startTime, nextTime);
								double q21=q-startQ;
								if(t21!=0){
									double jq=startQ+q21*tx1/t21;
									jq=new BigDecimal(jq).setScale(3, BigDecimal.ROUND_HALF_UP).doubleValue();//保留2位小数
									Map result=new HashMap();
									result.put("DT", nextTime.substring(0, 16));
									result.put("Q", jq);
									result.put("name", nextTime.substring(0, 16));
									result.put("value", jq);
									resultList.add(result);
									xList.add(nextTime.substring(0, 16));
									yList.add(jq);
									nextTime = CommonUtil.getAfterMinitsDateTime(nextTime, Integer.valueOf(interval));
								}
							}
							startTime = dt+":00";
							startQ=q;
						}else{
							startTime=dt+":00";
							startQ=q;
						}
					}
				}
			}
		}
		table.put("dataList", resultList);
		table.put("xList", xList);
		table.put("yList", yList);
		return table;
	}
	/**
	 * 获取河道水情列表数据
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public PageResults getRiverListData(RiverFormBean mRiverFormBean){
		return mRiverDao.getRiverListData(mRiverFormBean);
	}
	
	/**
	 * 根据主键ID获取实体
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public River getRiverInfoById(RiverFormBean mRiverFormBean){
		return mRiverDao.getRiverInfoById(mRiverFormBean);
	}
	public void saveRiver(River river){
		mRiverDao.saveOrUpdate(river);
	}
	/**
	 * 增加实体对象
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void create(River mRiver){
		mRiverDao.saveRiverInfo(mRiver);
	}
	
	/**
	 * 修改实体对象
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void update(River mRiver){
		mRiverDao.updateRiverInfo(mRiver);	
	}
	
	/**
	 * 根据主键ID获取 实体
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public PageResults getRiverInfoListByIds(String ids){
		return mRiverDao.getRiverInfoListByIds(ids);
	}
	
	/**
	 * 根据主键ID删除 实体
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void deletRiverInfoByIds(RiverFormBean mRiverFormBean){
		String[] idary=mRiverFormBean.getmRiverInfoBean().getStcd().split(",");
		String[] idary_=mRiverFormBean.getmRiverInfoBean().getTm().split(",");
		for(int i=0,j=0;i<idary.length&&j<idary_.length;i++,j++){
			mRiverDao.deletRiverInfoByIds(idary[i],idary_[j]);
		}
	}
	/**
	 * 导出（湖）容曲线列表数据
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void export(RiverFormBean mRiverFormBean,PageResults prs,HttpServletRequest request,HttpServletResponse response) throws IOException{
		String year = DateUtil.getYear();//年
		String method = DateUtil.getMonth();//月
		String day = DateUtil.getDay();//日
		String replace="河道水情_"+year + "年" + method + "月" +day + "日";
		String title="河道水情";
		String [] tab = {"序号","测站编码","时间","水位","流量","河水特征码","水势","断面过水面积","断面平均流速","断面最大流速","测流方法","测积方法","测速方法"};
		String [] val = {"STNM","TM","Z","Q","FLWCHRCD","WPTN","XSA","XSAVV","XSMXV","MSQMT","MSAMT","MSVMT"};
		List result=mRiverDao.getRiverListData_export(mRiverFormBean).getResults();
		String file = ExcelUtils.SellerStat2Excel(result, request, replace,tab,title,val);
		response.setContentType("multipart/form-data");  
		String path = request.getSession().getServletContext().getRealPath("/")+file;
		response.setHeader("Content-Disposition", "attachment;fileName="+new String(file.getBytes("UTF-8"),"ISO8859-1"));
        //通过文件路径获得File对象(假如此路径中有一个download.pdf文件)  
        File files = new File(path);
        FileInputStream inputStream = new FileInputStream(files);
        ServletOutputStream out= response.getOutputStream();
        int b = 0;  
        byte[] buffer = new byte[1024];  
        while (b != -1){  
            b = inputStream.read(buffer);  
            //4.写到输出流(out)中  
            out.write(buffer,0,b);  
        }  
        inputStream.close();  
        out.close();  
        out.flush();
	}
	
	/**
	 * 导入数据
	 * @throws IOException 
	 */
	@SuppressWarnings("static-access")
	@Transactional(propagation=Propagation.REQUIRED)
	public Hashtable<String,String> importPptn(File[] file,String[] fileFileName) throws IOException{
		Hashtable<String,String> table = new Hashtable<String,String>();
		File[] srcFiles = file;
		InputStream in = null;
		ExcelVersionUtil ev=new ExcelVersionUtil();
		ImportExeclUtil importExeclUtil=new ImportExeclUtil();
		for(int i = 0; i < srcFiles.length; i++){
			in = new BufferedInputStream(new FileInputStream(srcFiles[i]));
			boolean isExcel2003 = true;// 根据文件名判断文件是2003版本还是2007版本  
            if (ev.isExcel2007(fileFileName[i])) {  
                isExcel2003 = false;  
            }
            //通过工具栏ImportExeclUtil中的read方法解析excel
            List<River> dataLst =importExeclUtil.parseRiverExcel(in,isExcel2003);
            if(dataLst==null || dataLst.size()<1){
            	table.put("reflag", "0");
            	table.put("message", "Excel表格中未解析到数据!");
            	return table;
            }
            //校验数据
            for(int a=0;a<dataLst.size();a++){
            	River pp = dataLst.get(a);
            	if(pp!=null){
            		String stcd=pp.getStcd();
            		String tm=pp.getTm();
            		tm=tm.replace("-", "");
            		tm=tm.replace(":", "");
            		tm=tm.replace(" ", "");
            		String nm=stcd+tm;
            		pp.setNm(nm);
            		mRiverDao.saveOrUpdate(pp);
            	}
            }
		}
		table.put("reflag", "1");
    	return table;
	}
}
