package com.lyht.business.consumer.hydrologicalData.dao;

import java.util.List;
import java.util.Map;

import org.hibernate.SQLQuery;
import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Repository;

import com.lyht.base.hibernate.basedao.HibernateBaseDao;
import com.lyht.base.hibernate.common.PageResults;
import com.lyht.business.consumer.hydrologicalData.bean.Zvarl;
import com.lyht.business.consumer.hydrologicalData.formbean.ZvarlFormBean;
import com.lyht.util.CommonUtil;
import com.lyht.util.DateUtil;

@Repository
@Scope("prototype")
@SuppressWarnings("rawtypes")
public class ZvarlDao extends HibernateBaseDao<Zvarl>{

	/**
	 * 获取列表数据
	 * */
	public PageResults getZvarlListData(ZvarlFormBean mZvarlFormBean){
		StringBuilder sql=new StringBuilder();
		String str=spliceStrZvarl(mZvarlFormBean);
		sql.append("SELECT ZVARL.STCD,ZVARL.MSTM,ZVARL.PTNO,ZVARL.RZ,ZVARL.W,ZVARL.WSFA,ZVARL.MODITIME,B.STNM AS STNM FROM ST_ZVARL_B AS ZVARL ");
		sql.append("LEFT JOIN ST_STBPRP_B AS B ON B.STCD = ZVARL.STCD WHERE 1=1 ");
		if(null!=str && !"".equals(str)){
			sql.append(str);
			sql.append(" ORDER BY ZVARL.STCD,ZVARL.PTNO");
		}else{
			sql.append(" ORDER BY ZVARL.STCD,ZVARL.MSTM");
		}
		return this.findPageByFetchedSql(sql.toString(), null
				,mZvarlFormBean.getPageBean().getOffset()
				,mZvarlFormBean.getPageBean().getLimit()
				,null);
	}
	/**
	 * 获取列表数据用于导出
	 * */
	public PageResults getZvarlListData_export(ZvarlFormBean mZvarlFormBean){
		StringBuilder sql=new StringBuilder();
		String str=spliceStrZvarl(mZvarlFormBean);
		sql.append("SELECT STCD,MSTM,PTNO,RZ,W,WSFA,MODITIME FROM ST_ZVARL_B WHERE 1=1 ");
		if(null!=str && !"".equals(str)){
			sql.append(str);
		}
		sql.append(" ORDER BY STCD");
		return this.findPageByFetchedSql(sql.toString(), null
				,mZvarlFormBean.getPageBean().getOffset()
				,mZvarlFormBean.getPageBean().getLimit()
				,null);
	}
	
	/**
	 * 根据主键ID获取（湖）容曲线曲线实体
	 * */
	public PageResults getZvarlInfoListByIds(String ids){
		StringBuilder sql=new StringBuilder();
		sql.append("SELECT STCD,MSTM,PTNO,RZ,W,WSFA,MODITIME FROM ST_ZVARL_B WHERE 1=1 ");
		if(ids.length()>0){
			sql.append(" AND STCD IN ('"+ids+"')");
		}
		sql.append(" ORDER BY STCD");
		return this.findPageByFetchedSql(sql.toString(), null, 0, 100000000, null);
	}
	
	/**
	 * 根据主键ID删除 实体
	 * */
	public void deletZvarlInfoByIds_(String stcd,String ptno){
		StringBuilder sql=new StringBuilder();
		sql.append("DELETE FROM ST_ZVARL_B WHERE STCD = '"+CommonUtil.trim(stcd)+"'");
		sql.append(" AND PTNO = '"+CommonUtil.trim(ptno)+"' ");
		this.exectueSQL(sql.toString());
	}
	
	/**
	 * 根据主键ID删除 实体
	 * */
	public void deletZvarlInfoByIds(String stcd,String mstm){
		StringBuilder sql=new StringBuilder();
		sql.append("DELETE FROM ST_ZVARL_B WHERE STCD = '"+CommonUtil.trim(stcd)+"'");
		sql.append(" AND MSTM = '"+CommonUtil.trim(mstm)+"'");
		this.exectueSQL(sql.toString());
	}
	
	/**
	 * 增加实体对象
	 * */
	public void saveZvarlInfo(Zvarl mZvarl,int i){
		String sql=execQL(mZvarl,i); //执行sql语句操作
		this.exectueSQL(sql);
	}
	
	/**
	 * 查询库（湖）容曲线数量
	 * */
	public int count(){
		StringBuilder sql=new StringBuilder();
		sql.append("SELECT COUNT(STCD) AS STCD FROM ST_ZVARL_B");
		SQLQuery query=this.getSession().createSQLQuery(sql.toString());
		return (int)query.uniqueResult();
	}
	
	/**
	 * 根据测站编号与施测时间查询库（湖）容曲线信息
	 * */
	public List<Map> getZvarlInfoByParams(ZvarlFormBean mZvarlFormBean,String ptno){
		StringBuilder sql=new StringBuilder();
		sql.append("SELECT STCD,MSTM,PTNO,RZ,W,WSFA,MODITIME FROM ST_ZVARL_B ");
		sql.append(" WHERE STCD='"+mZvarlFormBean.getmZvarlInfoBean().getStcd()+"' ");
		sql.append("AND PTNO='"+ptno+"'");
		return this.createSQLQuerybyMap(sql.toString());
	}
	public List<Map> getZvarlInfoByParams(ZvarlFormBean mZvarlFormBean){
		StringBuilder sql=new StringBuilder();
		sql.append("SELECT PTNO FROM ST_ZVARL_B ");
		sql.append(" WHERE STCD='"+mZvarlFormBean.getmZvarlInfoBean().getStcd()+"' ");
		return this.createSQLQuerybyMap(sql.toString());
	}
	
	/**
	 * 根据测站编号、时间及序号修改库（湖）容曲线信息
	 * */
	public void updateZvarlInfoByParams(ZvarlFormBean mZvarlFormBean,String ptno,
			String rz,String w,String wsfa){
		String stcd=mZvarlFormBean.getmZvarlInfoBean().getStcd();
		String mstm=mZvarlFormBean.getmZvarlInfoBean().getMstm();
		StringBuilder sql=new StringBuilder();
		sql.append("UPDATE ST_ZVARL_B SET STCD = '"+CommonUtil.trim(stcd)+"',MSTM = '"+CommonUtil.trim(mstm)+"', ");
		sql.append(" PTNO = '"+CommonUtil.trim(ptno)+"', RZ = '"+CommonUtil.trim(rz)+"',W = '"+CommonUtil.trim(w)+"', ");
		sql.append("WSFA = '"+CommonUtil.trim(wsfa)+"' WHERE STCD = '"+CommonUtil.trim(stcd)+"' ");
		sql.append(" AND PTNO='"+CommonUtil.trim(ptno)+"'");
		System.out.println(sql.toString());
		this.exectueSQL(sql.toString());
	}
	
	/**
	 * 根据测站编号、时间及序号新增库（湖）容曲线信息
	 * */
	public void insertZvarlInfoByParams(ZvarlFormBean mZvarlFormBean,String ptno,
			String rz,String w,String wsfa){
		String modiTime=DateUtil.getDateTime(); //获取当前系统时间
		String stcd=mZvarlFormBean.getmZvarlInfoBean().getStcd();
		String mstm=mZvarlFormBean.getmZvarlInfoBean().getMstm();
		StringBuilder sql=new StringBuilder();
		sql.append("INSERT INTO ST_ZVARL_B (STCD,MSTM,PTNO,RZ,W,WSFA,MODITIME) ");
		sql.append("VALUES ('"+CommonUtil.trim(stcd)+"','"+DateUtil.ConvertTimestamp(mstm)+"',");
		sql.append("'"+CommonUtil.trim(ptno)+"','"+CommonUtil.trim(rz)+"',");
		sql.append("'"+CommonUtil.trim(w)+"','"+CommonUtil.trim(wsfa)+"','"+modiTime+"')");
		this.exectueSQL(sql.toString());
	}
	
	/**
	 * 修改实体对象
	 * */
	public void updateZvarlInfo(Zvarl mZvarl){
		String sql = updateById(mZvarl);//执行sql语句操作
		this.exectueSQL(sql);
	}
	
	/**
	 * 根据主键ID获取实体
	 * */
	@SuppressWarnings("unchecked")
	public List<Zvarl> getZvarlInfoById(String stcd){
		Zvarl mZvarl=new Zvarl();
		String sql=execById(stcd);//执行sql语句操作
		List<Zvarl> mZvarlList=null;
		try{
			mZvarlList=this.getSession().createSQLQuery(sql.toString()).addEntity(Zvarl.class).list();
		}catch (Exception e) {
			e.getStackTrace();
		}
		return mZvarlList;
	}
	@SuppressWarnings("unchecked")
	public Zvarl getZvarlInfoById_(String stcd){
		Zvarl mZvarl=new Zvarl();
		String sql=execById(stcd);//执行sql语句操作
		List<Zvarl> mZvarlList=null;
		try{
			mZvarlList=this.getSession().createSQLQuery(sql.toString()).addEntity(Zvarl.class).list();
			for(int i=0;i<mZvarlList.size();i++){
				mZvarl=mZvarlList.get(0);
			}
		}catch (Exception e) {
			e.getStackTrace();
		}
		return mZvarl;
	}
	
	/**
	 * 根据条件查询 
	 * */
	private String spliceStrZvarl(ZvarlFormBean mZvarlFormBean){
		StringBuilder sql=new StringBuilder();
		if(null!=mZvarlFormBean){
			if(CommonUtil.trim(mZvarlFormBean.getSearchName()).length()>0){
				sql.append("AND ((ZVARL.STCD LIKE '%"+CommonUtil.trim(mZvarlFormBean.getSearchName())+"%') ");
				sql.append("OR (ZVARL.MSTM LIKE '%"+CommonUtil.trim(mZvarlFormBean.getSearchName())+"%') ");
				sql.append("OR (ZVARL.PTNO LIKE '%"+CommonUtil.trim(mZvarlFormBean.getSearchName())+"%') ");
				sql.append("OR (ZVARL.RZ LIKE '%"+CommonUtil.trim(mZvarlFormBean.getSearchName())+"%') ");
				sql.append("OR (ZVARL.W  LIKE '%"+CommonUtil.trim(mZvarlFormBean.getSearchName())+"%') ");
				sql.append("OR (ZVARL.WSFA  LIKE '%"+CommonUtil.trim(mZvarlFormBean.getSearchName())+"%') ");
				sql.append("OR (ZVARL.MODITIME  LIKE '%"+CommonUtil.trim(mZvarlFormBean.getSearchName())+"%') ");
				sql.append("OR (ZVARL.STNM  LIKE '%"+CommonUtil.trim(mZvarlFormBean.getSearchName())+"%')) ");
			}
			if(null!=mZvarlFormBean.getmZvarlInfoBean()){
				if(CommonUtil.trim(mZvarlFormBean.getmZvarlInfoBean().getStcd()).length()>0){
					sql.append(" AND ZVARL.STCD = '"+CommonUtil.trim(mZvarlFormBean.getmZvarlInfoBean().getStcd())+"'");
				}
				if(CommonUtil.trim(mZvarlFormBean.getmZvarlInfoBean().getMstm()).length()>0){
					sql.append(" AND ZVARL.MSTM = '"+CommonUtil.trim(mZvarlFormBean.getmZvarlInfoBean().getMstm())+"'");
				}
			}
		}
		return sql.toString();
	}
	
	/**
	 * 执行新增语句
	 * */
	private String execQL(Zvarl mZvarl,int i){
		String modiTime=DateUtil.getDateTime(); //获取当前系统时间
		StringBuilder sql=new StringBuilder();
		sql.append("INSERT INTO ST_ZVARL_B (STCD,MSTM,PTNO,RZ,W,WSFA,MODITIME) ");
		sql.append("VALUES ('"+CommonUtil.trim(mZvarl.getStcd())+"',");
		sql.append("'"+DateUtil.ConvertTimestamp(mZvarl.getMstm())+"','"+CommonUtil.trim(++i)+"',");
		sql.append("'"+CommonUtil.trim(mZvarl.getRz())+"','"+CommonUtil.trim(mZvarl.getW())+"',");
		sql.append("'"+CommonUtil.trim(mZvarl.getWsfa())+"','"+modiTime+"')");
		return sql.toString();
	}
	
	/**
	 * 根据ID执行查询语句
	 * */
	private String execById(String stcd){
		StringBuilder sql=new StringBuilder();
		sql.append("SELECT STCD,MSTM,PTNO,RZ,W,WSFA,MODITIME FROM ST_ZVARL_B WHERE STCD='"+stcd+"'");
		return sql.toString();
	}
	
	/**
	 * 根据ID执行修改语句
	 * */
	private String updateById(Zvarl mZvarl){
		StringBuilder sql=new StringBuilder();
		sql.append("UPDATE ST_ZVARL_B SET STCD = '"+CommonUtil.trim(mZvarl.getStcd())+"', MSTM = '"+CommonUtil.trim(mZvarl.getMstm())+"', ");
		sql.append(" PTNO = '"+CommonUtil.trim(mZvarl.getPtno())+"', RZ = '"+CommonUtil.trim(mZvarl.getRz())+"', W = '"+CommonUtil.trim(mZvarl.getW())+"',");
		sql.append(" WSFA = '"+CommonUtil.trim(mZvarl.getWsfa())+"' WHERE STCD = '"+CommonUtil.trim(mZvarl.getStcd())+"'");
		return sql.toString();
	}
	public void delptno(ZvarlFormBean mZvarlFormBean, String str) {
		StringBuilder sql=new StringBuilder();
		sql.append("DELETE FROM ST_ZVARL_B WHERE STCD = '"+mZvarlFormBean.getmZvarlInfoBean().getStcd()+"'");
		sql.append(" AND PTNO = '"+str+"'");
		System.out.println(sql.toString());
		this.exectueSQL(sql.toString());
	}
}
