package com.lyht.business.consumer.hydrologicalData.service;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.context.annotation.Scope;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.lyht.base.hibernate.common.PageResults;
import com.lyht.business.consumer.hydrologicalData.bean.Dayev;
import com.lyht.business.consumer.hydrologicalData.bean.Rrff;
import com.lyht.business.consumer.hydrologicalData.dao.RrffDao;
import com.lyht.business.consumer.hydrologicalData.dao.StbprpDao;
import com.lyht.business.consumer.hydrologicalData.formbean.RrffFormBean;
import com.lyht.util.DateUtil;
import com.lyht.util.ExcelUtils;
import com.lyht.util.ExcelVersionUtil;
import com.lyht.util.ImportExeclUtil;

@Service
@Transactional
@Scope("prototype")
@SuppressWarnings("rawtypes")
public class RrffService {

	@Resource private RrffDao mRrffDao;
	
	/**
	 * 获取降雨径流列表数据
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public PageResults getRrffListData(RrffFormBean mRrffFormBean) {
		return mRrffDao.getRrffListData(mRrffFormBean);
	}

	/*
	 * 根据ID获取降雨径流
	 */
	@Transactional(propagation=Propagation.REQUIRED)
	public Rrff getRrffInfoById(RrffFormBean mRrffFormBean) {
		return mRrffDao.getRrffInfoById(mRrffFormBean);
	}

	/*
	 * 增加实体对象
	 */
	@Transactional(propagation=Propagation.REQUIRED)
	public void create(Rrff mRrff) {
		mRrffDao.saveRrffInfo(mRrff);
	}
	/*
	 * 修改实体对象
	 */
	@Transactional(propagation=Propagation.REQUIRED)
	public void update(Rrff mRrff) {
		mRrffDao.updateRrffInfo(mRrff);
	}
	
	/*
	 * 根据主键ID删除 实体
	 */
	@Transactional(propagation=Propagation.REQUIRED)
	public void deletRrffInfoByIds(RrffFormBean mRrffFormBean) {
		String[] idary=mRrffFormBean.getmRrffInfoBean().getStcd().split(",");
		String[] idary_=mRrffFormBean.getmRrffInfoBean().getUserName().split(",");
		for(int i=0,j=0;i<idary.length&&j<idary_.length;i++,j++){
			mRrffDao.deletRrffInfoByIds(idary[i],idary_[j]);
		}
	}
	/**
	 * 导入数据
	 * @throws IOException 
	 */
	@SuppressWarnings("static-access")
	@Transactional(propagation=Propagation.REQUIRED)
	public void importRrff(File[] file, String[] fileFileName) throws IOException {
		File[] srcFiles = file;
		InputStream in = null;
		ExcelVersionUtil ev=new ExcelVersionUtil();
		ImportExeclUtil importExeclUtil=new ImportExeclUtil();
		for(int i = 0; i < srcFiles.length; i++){
			in = new BufferedInputStream(new FileInputStream(srcFiles[i]));
			boolean isExcel2003 = true;// 根据文件名判断文件是2003版本还是2007版本  
            if (ev.isExcel2007(fileFileName[i])) {  
                isExcel2003 = false;  
            }
            //通过工具栏ImportExeclUtil中的read方法解析excel
            List<List<String>> dataLst =importExeclUtil.read(in,isExcel2003);
            List<Map> stbprpList = mStbprpDao.getStbprpList(null);
            for(int j=1;j<dataLst.size();j++){
            	List<String> list=dataLst.get(j);
            	Rrff mRrff=new Rrff();
            	if(stbprpList!=null&&stbprpList.size()>0){
            		for (int k = 0; k < stbprpList.size(); k++) {
            			Map map = stbprpList.get(k);
            			String stnm = (String) map.get("STNM");
            			String stcds = (String) map.get("STCD");
            			if(list.get(1).equals(stnm)){
            				mRrff.setStcd(stcds);
            			}
					}
            	}
            	mRrff.setUserName(list.get(2));
            	mRrff.setPa(Float.parseFloat(list.get(3)));
            	mRrff.setP(Float.parseFloat(list.get(4)));
            	mRrff.setR(Float.parseFloat(list.get(5)));
            	mRrffDao.saveRrffInfo(mRrff);
            }
		}
	}
	@Resource
	private StbprpDao mStbprpDao;
	/**
	 * 导出降雨径流列表数据
	 * @throws IOException 
	 * */
	@Transactional(propagation=Propagation.REQUIRED)
	public void export(RrffFormBean mRrffFormBean, PageResults prs, HttpServletRequest req, HttpServletResponse res) throws IOException {
		String year = DateUtil.getYear();//年
		String method = DateUtil.getMonth();//月
		String day = DateUtil.getDay();//日
		String replace="降雨径流_"+year + "年" + method + "月" +day + "日";
		String title="降雨径流";
		String [] tab = {"序号","测站编码","用户名","影响雨量","降雨量","径流"};
		String [] val = {"STCD","USERNAME","Pa","P","R"};
		List result=mRrffDao.getRrffListData_export(mRrffFormBean).getResults();
		String file = ExcelUtils.SellerStat2Excel(result, req, replace,tab,title,val);
		res.setContentType("multipart/form-data");  
		String path = req.getSession().getServletContext().getRealPath("/")+file;
		res.setHeader("Content-Disposition", "attachment;fileName="+new String(file.getBytes("UTF-8"),"ISO8859-1"));
        //通过文件路径获得File对象(假如此路径中有一个download.pdf文件)  
        File files = new File(path);
        FileInputStream inputStream = new FileInputStream(files);
        ServletOutputStream out= res.getOutputStream();
        int b = 0;  
        byte[] buffer = new byte[1024];  
        while (b != -1){  
            b = inputStream.read(buffer);  
            //4.写到输出流(out)中  
            out.write(buffer,0,b);  
        }  
        inputStream.close();  
        out.close();  
        out.flush();
		
	}

	//修改降雨径流 并保存from表单内容
	public void createX(RrffFormBean mRrffFormBean, String[] pa, String[] p, String[] r) {
		mRrffDao.del(mRrffFormBean);
		if(pa!=null&&p!=null&&r!=null){
			for(int i=0,j=0,k=0;i<pa.length&&j<p.length&&k<r.length;i++,j++,k++){
				mRrffDao.saveTsqxInfo(mRrffFormBean,pa[i],p[j],r[k]);
			}
		}
	}

}
