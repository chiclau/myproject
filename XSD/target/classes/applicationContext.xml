<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:oxm="http://www.springframework.org/schema/oxm"
	xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms-4.2.xsd
		http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-4.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd">
	
	<!-- 引入外部属性文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>
	
	<bean id="dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource"> 
	   <property name="driverClassName" value="${jdbc.driver}"></property>
	   <property name="url" value="${jdbc.url}"></property>
	   <property name="username" value="${jdbc.user}"></property>
	   <property name="password" value="${jdbc.password}"></property>
	   <!-- 数据库连接池保持的最小连接数 -->  
       <property name="minIdle" value="5" ></property>
       <!-- 数据库连接池保持的最大连接数 a-->   
       <property name="maxIdle" value="30" ></property>
       <!--  
           当数据库连接因为某种原因断掉之后，再重新从连接池中拿另外一个连接时实际上这个连接可能  
           已经无效，所以为了确保所拿到的连接全都有效需要在获取连接，返回连接以及连接空闲时进行  
           有效性验证 下面3个设置为ture时进行验证，默认为false  
       -->  
       <!-- 取得连接时是否进行有效性验证 -->  
       <property name="testOnBorrow" value="true" ></property>
       <!-- 返回连接时是否进行有效性验证 -->  
       <property name="testOnReturn" value="true" ></property>
       <!-- 连接空闲时是否进行有效性验证 -->  
       <property name="testWhileIdle" value="true" ></property>
	</bean>
	
	<!-- 实时库，可以动态配置 -->
	<bean id="linshi.dataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource"> 
	   <property name="driverClassName" value="${linshi.jdbc.driver}"></property>
	   <property name="url" value="${linshi.jdbc.url}"></property>
	   <property name="username" value="${linshi.jdbc.user}"></property>   
	   <property name="password" value="${linshi.jdbc.password}"></property>
	   <!-- 数据库连接池保持的最小连接数 -->  
       <property name="minIdle" value="5" ></property>
       <!-- 数据库连接池保持的最大连接数 a-->   
       <property name="maxIdle" value="30" ></property>
       <!--  
	           当数据库连接因为某种原因断掉之后，再重新从连接池中拿另外一个连接时实际上这个连接可能  
	           已经无效，所以为了确保所拿到的连接全都有效需要在获取连接，返回连接以及连接空闲时进行  
	           有效性验证 下面3个设置为ture时进行验证，默认为false  
       -->  
       <!-- 取得连接时是否进行有效性验证 -->  
       <property name="testOnBorrow" value="true" ></property>
       <!-- 返回连接时是否进行有效性验证 -->  
       <property name="testOnReturn" value="true" ></property>
       <!-- 连接空闲时是否进行有效性验证 -->  
       <property name="testWhileIdle" value="true" ></property>
	</bean>
	
	<bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
              <!-- 设置数据库方言 -->
              <prop key="hibernate.dialect">com.lyht.base.hibernate.MyDialect</prop>
              <!-- 设置自动创建|更新|验证数据库表结构 -->
<!--               <prop key="hibernate.hbm2ddl.auto">update</prop> -->
              <!-- 是否在控制台显示sql -->
              <prop key="hibernate.show_sql">false</prop>
              <!-- 是否格式化sql，优化显示 -->
              <prop key="hibernate.format_sql">false</prop>
              <!-- 是否开启二级缓存 -->
              <prop key="hibernate.cache.use_second_level_cache">false</prop>
              <!-- 是否开启查询缓存 -->
              <prop key="hibernate.cache.use_query_cache">false</prop>
              <!-- 数据库批量查询最大数 -->
              <prop key="hibernate.jdbc.fetch_size">50</prop>
              <!-- 数据库批量更新、添加、删除操作最大数 -->
              <prop key="hibernate.jdbc.batch_size">50</prop>
              <!-- 是否自动提交事务 -->
              <prop key="hibernate.connection.autocommit">true</prop>
              <!-- 指定hibernate在何时释放JDBC连接 -->
              <prop key="hibernate.connection.release_mode">auto</prop>
              <!-- 创建session方式 hibernate5.x 的方式 -->
              <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate5.SpringSessionContext</prop>
              <!-- javax.persistence.validation.mode默认情况下是auto的，
                   就是说如果不设置的话它是会自动去你的classpath下面找一个bean-validation**包 
                   所以把它设置为none即可 
              -->
              <prop key="javax.persistence.validation.mode">none</prop>
            </props>
        </property>
        
		<!-- 自动扫描实体对象 com.lyht.demo.bean的包结构中存放实体类 -->
        <property name="packagesToScan">
			<list>  
                <value>com.lyht.business</value>  
            </list>          
        </property>
        
	</bean>
	
	 <bean id="transactionManager"
        class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory">
            <ref bean="sessionFactory" />
        </property>
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager"/>
	
	<context:annotation-config></context:annotation-config>
	<context:component-scan base-package="com.lyht"></context:component-scan>
	
	<!-- 定义 Autowired  自动注入 bean -->
    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/> 
    
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>		
	
	<!-- Web Configuration -->  
    <util:properties id="config" location="classpath:config.properties"/>  

	
</beans>